/* Author: Denis Podgurskii */
import { ptk_controller_requestbuilder } from "./controller/requestbuilder.js"
var controller = new ptk_controller_requestbuilder()

jQuery(function () {

    $(document).on("initEvents", function (e, data) {
        $('.tiny.form').off("submit")
        $('.tiny.form').on('submit', function (e) {
            e.preventDefault()
            return false
        })
    })

    $(document).on("initForm", function (e, request, formId) {
        if (request && request.requestHeaders) {
            var $form = $('#' + formId + ' #request_form')

            var path = request.method + ' ' + request.url + ' HTTP/1.1'
            var headersStr = path + '\n' + request.requestHeaders.map(x => x.name + ": " + x.value).join('\n')

            if (request.requestBody && request.requestBody.formData) {
                var params = Object.keys(request.requestBody.formData).map(function (k) {
                    return encodeURIComponent(k) + '=' + encodeURIComponent(request.requestBody.formData[k])
                }).join('&')
                headersStr += "\n\n" + params
            } else if (request.requestBody && request.requestBody.raw) {
                var arr = new Uint8Array(request.requestBody.raw[0].bytes)
                var params = String.fromCharCode.apply(String, arr)
                headersStr += "\n\n" + params
            }

            $form.form('set values', {
                'request': headersStr,
            })
            $(document).trigger("parseRequest", formId)
        }
    })

    $(document).on("resetForm", function (e, formId) {
        var $form = $('#' + formId + ' #request_form')
        $form.form('clear')
        $form.form('set values', { 'request_method': 'GET', 'request_protocol': 'HTTP', 'request_redirect': true })

        $form.form({
            inline: true,
            keyboardShortcuts: false,
            fields: {
                request_method: {
                    identifier: 'request_method',
                    rules: [{ type: 'empty' }]
                },
                request_protocol: {
                    identifier: 'request_protocol',
                    rules: [{ type: 'empty' }]
                },
                request_url: {
                    identifier: 'request_url',
                    rules: [{
                        prompt: 'URL is required',
                        type: 'regExp',
                        value: /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/i,
                    }]
                },
                request_port: {
                    identifier: 'request_port',
                    rules: [{ type: 'integer', prompt: 'Port should be an integer value', }]
                }
            }
        })
    })

    $(document).on("parseRequest", function (e, formId) {
        var $form = $('#' + formId + ' #request_form')
        var values = $form.form('get values')
        try {
            controller.parseRawRequest(values).then(function (schema) {
                $form.form('set value', 'request_method', schema.request.method)
                $form.form('set value', 'request_url', schema.request.url)
                $form.form('set value', 'request_protocol', schema.request.protocol.replace(":", ""))
                $form.form('set value', 'request', schema.request.asString)
            })

        } catch (e) {
            $('#traffic_error_message').text(e)
            $('.mini.modal').modal('show')
        }
    })

    $(document).on("updateRawRequest", function (e, formId) {
        var $form = $('#' + formId + ' #request_form')
        var values = $form.form('get values')
        if (values.request == "" && values.request_url == "") return
        try {
            controller.updateRawRequest(values).then(function (schema) {
                $form.form('set value', 'request_method', schema.request.method)
                $form.form('set value', 'request_url', schema.request.url)
                $form.form('set value', 'request_protocol', schema.request.protocol.replace(":", ""))
                $form.form('set value', 'request', schema.request.asString)
            })
        } catch (e) {
            $('#traffic_error_message').text(e)
            $('.mini.modal').modal('show')
        }
    })

    $(document).on("sendRequest", function (e, formId) {
        var schema = {}
        var $form = $('#' + formId + ' #request_form')
        $form.form('set value', 'response_headers', '')
        $form.form('set value', 'response_body', '')
        $form.form('validate form')

        if ($form.form('is valid')) {
            var values = $form.form('get values')
            controller.parseRawRequest(values).then(function (schema) {
                schema.request.followRedirect = values.request_redirect == 'on' ? true : false
                controller.sendRequest(schema).then((result) => {
                    $form.form('set value', 'response_headers', result.headers)
                    $form.form('set value', 'response_body', result.body)
                }).catch(function (error) {
                    $form.form('set value', 'response_headers', error.message)
                })
            })
        }
    })


    $(document).trigger("initEvents", 'tab_0')
    $(document).trigger("resetForm", 'request_0')

    var params = new URLSearchParams(window.location.search)
    if (params.has('requestDetails')) {
        let request = JSON.parse(atob(params.get('requestDetails')))
        $(document).trigger("initForm", [request, "request_0"])
    } else if (params.has('validateRequest')) {
        controller.validateRequest(decodeURIComponent(params.get('validateRequest')))
    }



    $('.rbsettings').on('click', function () {
        $('.request_forms_container').hide("slow")
        $('.request_settings_container').show("slow")
    })

    $('#closesettings').on('click', function () {
        $('.request_settings_container').hide("slow")
        $('.request_forms_container').show("slow")
    })

    $('#add_request').on('click', function () {
        var lastId = 'tab_0', lastIndex = 0, newIndex = 0
        $('#tabMenuId .item').each(function (i, obj) {
            lastId = $(obj).attr('id')
            var i = parseInt($(obj).attr('index'))
            lastIndex = i > lastIndex ? i : lastIndex;
            $(obj).removeClass('active')
        })
        newIndex = lastIndex + 1

        $("#tabMenuId .item.active").removeClass('active')
        $(".tab.segment.active").removeClass('active')

        var newItem = '<a class="item active request_tab" ' +
            'index="' + newIndex + '" id="tab_' + newIndex + '" data-tab="tab_' + newIndex + '"><span>Request</span><i class="window close icon"></i></a>'
        $('#' + lastId).after(newItem)

        $("#request_" + lastIndex).after($("#request_0").
            clone().
            attr('id', 'request_' + newIndex).
            attr('data-tab', 'tab_' + newIndex).
            addClass('active'))

        $(document).trigger("initEvents", newIndex)
        $(document).trigger("resetForm", 'request_' + newIndex)
        $('.menu .item').tab()
    })

    $('#scan_btn').on('click', function () {
        controller.runScan($('.ui.tab.active').attr('id'))
    })

    $(document).on("click", ".reset", function () {
        $(document).trigger("resetForm", $(this).closest('.ui.tab.active').attr('id'))
    })

    $(document).on("click", ".send", function () {
        $(document).trigger("sendRequest", $(this).closest('.ui.tab.active').attr('id'))
    })

    $(document).on("click", ".window.close.icon", function () {
        $('.ui.inverted.dimmer').addClass('active')
        $(document).trigger("removeTab", $(this).parent().attr('index'))
        setTimeout(function () {
            $('.ui.inverted.dimmer').removeClass('active')
        }, 200)
    })

    $(document).on("dblclick", ".request_tab span", function () {
        $(this).attr('contentEditable', true)
        $(this).trigger('focus')
    })

    $(document).on("blur", ".request_tab span", function () {
        $(this).attr('contentEditable', false)
    })

    $(document).on("click", ".showHtml", function () {
        let formId = $(this).closest('.ui.tab.active').attr('id'),
            $form = $('#' + formId + ' #request_form'),
            values = $form.form('get values')
        let htmlString = $(this).closest('.response_view').find('[name="response_body"]').val()
        controller.parseRawRequest(values).then(function (schema) {
            let baseURI = schema.request.protocol + "//" + schema.request.host + "/"
            htmlString = htmlString.replace(/<(head)(.+)?>/, "<$1$2><base href='" + baseURI + "' />")
            let dataBase64 = 'data:text/html;base64,' + btoa(unescape(encodeURIComponent(htmlString)))

            let blob = new Blob([unescape(encodeURIComponent(htmlString))], { type: 'text/html' })
            let srcData = URL.createObjectURL(blob)

            $('#dialogResponseHtml').modal('show')
            $('#dialogResponseHtmlFrame').prop('src', dataBase64)
        })
        return false
    })

    $(document).on('change', "[name=request_method], [name=request_protocol], [name=request_url]", function (e) {
        if (e.target.value != "")
            $(document).trigger("updateRawRequest", $(this).closest('.ui.tab.active').attr('id'))
    })

    $(document).on('change', "[name=request]", function (e) {
        if (e.target.value != "" && e.originalEvent.isTrusted)
            $(document).trigger("parseRequest", $(this).closest('.ui.tab.active').attr('id'))
    })


    $(document).on("removeTab", function (e, index) {
        $('[data-tab=tab_' + index + ']').remove()
        $(".ui.tab.active").removeClass('active')
        $(".request_tab").removeClass('active')
        $('[data-tab=tab_0]').addClass('active')
        $('#request_0').addClass('active')
    })




})



////////////////////////////////////
/* Chrome runtime events handlers */
////////////////////////////////////
browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptk_background2popup" && message.type == "attack completed") {
        controller.bindAttacks()
    }
})