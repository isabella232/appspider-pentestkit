/* Author: Denis Podgurskii */
import { macroController } from "./controller/macro.js"

jQuery(function () {


    var editor = CodeMirror.fromTextArea(document.getElementById('recording_output'), {
        lineNumbers: true,
        lineWrapping: true,
        mode: "application/xml",
        indentUnit: 6,
        scrollbarStyle: null,
        extraKeys: { "Ctrl-Y": function (cm) { cm.foldCode(cm.getCursor()) } },
        foldGutter: true,
        gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
    })
    editor.setSize('auto', '509px')



    editor.on('change', e => {
        var currentVal = editor.getValue()
        if (currentVal == ptk_app.recorder.savedMacro) {
            return
        }
        ptk_app.recorder.savedMacro = currentVal
        //macroController.checkFrames()
    })

    var $form = $('#macro_form')
    $(document).trigger("initForm")
    //macroController.init($form, editor)

    browser.tabs.query({
        currentWindow: true, active: true
    }).then(function (tabs) {
        var tab = tabs[0]
        if (tab && !tab.url.startsWith('chrome://')) $form.form('set value', 'url', tab.url)

    })


    $('.start').on('click', function (cleanCookie = false) {
        macroController.start(false)
    })

    $('.start_clean_cookie').on('click', function () {
        $form.form({
            inline: true,
            fields: {
                url: {
                    identifier: 'url',
                    rules: [{
                        prompt: 'URL is required in the format http://example.com or https://120.0.0.1',
                        type: 'regExp',
                        value: /^((http|https):\/\/){1}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])?(:+[0-9]+)?([\/\?]{1}.*)?$/i,
                    }]
                }
            }
        })
        $form.form('validate form')
        if (!$form.form('is valid')) return
        macroController.start(true, $form.form('get values'))
    })

    $('.reset_recording').on('click', function () {
        var values = $form.form('get values')
        $form.form('set value', 'recording_output', '')
        editor.setValue('')
        $('form').form('reset')
        $('[name="playback_regex"]').prop('disabled', true)
        $('.iframeSign').removeClass("display")
        $form.form('set value', 'url', values['url'])
        ptk_app.recorder.reset()
        //macroController.checkFrames()
    })

    $(document).on("initForm", function (e, data) {

        $form.form('set value', 'element_path', ptk_app.settings.macro.elementPath)
        // $form.form('set value', 'min_duration', ptk_app.recorder.minDuration)
        // $form.form('set value', 'event_type', ptk_app.recorder.eventType)
        // $form.form('set value', 'playback_regex', ptk_app.recorder.playbackRegex)
        // $form.form('set value', 'enable_regex', ptk_app.recorder.enableRegex)
        // if (ptk_app.recorder.enableRegex)
        //     $("input[name='playback_regex']").prop('disabled', false)
        // else {
        //     $("input[name='playback_regex']").prop('disabled', true)
        // }
    })

    ///////// Macro /////////

    $("input[name='element_path']").on('change', function () {
        ptk_app.recorder.elementPath = this.value
        macroController.export()
    })

    $("input[name='event_type']").on('change', function () {
        ptk_app.recorder.eventType = this.value
        macroController.export()
    })

    $("input[name='min_duration']").on('change', function () {
        ptk_app.recorder.minDuration = this.value
        macroController.export()
    })

    $("input[name='playback_regex']").on('change', function () {
        ptk_app.recorder.playbackRegex = this.value
    })


    $('.import_recording').on('click', function () {
        $('#importerrordlg').css("display", "none")
        $('#importerrormsg').text("")
        $('#dialogImportRecording').modal('show')
    })

    $("#sidefileimport").on('change', function (evt) {
        var files = evt.target.files
        if (!files) {
            alert("Failed to load .side file")
            return
        }

        var reader = new FileReader()
        reader.onload = function () {
            try {
                var content = JSON.parse(reader.result)
                var output = ptk_app.Exporter.sideToMacro(content)
                var $form = $('#macro_form')
                $form.form('set value', 'recording_output', output)
                editor.setOption("mode", "application/xml")
                editor.setValue(output)
                $('#dialogImportRecording').modal('hide')
            } catch (e) {
                $('#importerrordlg').css("display", "block")
                $('#importerrormsg').text("Could not parse JSON: " + e.message)
            }
        }
        reader.readAsText(files[0])
    })

    $("#htmlfileimport").on('change', function (evt) {
        var files = evt.target.files
        if (!files) {
            alert("Failed to load .html file")
            return
        }

        var reader = new FileReader()
        reader.onload = function () {
            try {
                var output = ptk_app.Exporter.seleniumHtmlToMacro(reader.result)
                var $form = $('#macro_form')
                $form.form('set value', 'recording_output', output)
                editor.setOption("mode", "application/xml")
                editor.setValue(output)
                $('#dialogImportRecording').modal('hide')
            } catch (e) {
                $('#importerrordlg').css("display", "block")
                $('#importerrormsg').text("Could not parse HTML: " + e.message)
            }
        }

        reader.readAsText(files[0])
    })


    $("input[name='enable_regex']").on('change', function () {
        var values = $form.form('get values')
        if (values['playback_regex'] == '')
            $form.form('set value', 'playback_regex', '(sign|log)[ -]?(out|off)')

        if (values['enable_regex'] == 'on') {
            $("input[name='playback_regex']").prop('disabled', false)
        } else {
            $("input[name='playback_regex']").prop('disabled', true)
        }
        ptk_app.recorder.enableRegex = (values['enable_regex'] == 'on' ? true : false)
    })

    $('.macro_export').on('click', function () {

        $form.form({
            inline: true,
            fields: {
                min_duration: {
                    identifier: 'min_duration',
                    rules: [{
                        type: 'integer',
                        prompt: 'Please enter an integer value'
                    }]
                },
            }
        })
        $form.form('validate form')
        if (!$form.form('is valid')) return

        var values = $form.form('get values')
        values['useEncryption'] = false

        if (ptk_app.recorder.items.length > 0) {
            macroController.export()
        } else {
            $('#macro_error_message').text("Recorded macro is empty. Record a macro before export")
            $('.mini.modal').modal('show')
        }

    })

    $('.macro_replay').on('click', function () {
        try {
            var xml = editor.getValue(),
                xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                $events = $xml.find("MacroEvent"),
                macroEvents = [],
                startUrl = null
            $events.each(function (index) {
                var item = {
                    EventType: $(this).find('EventType').text(),
                    UseEncryptedData: $(this).find('UseEncryptedData').text(),
                    Data: $(this).find('Data').text(),
                    ElementPath: $(this).find('ElementPath').text(),
                    Duration: $(this).find('Duration').text(),
                    Enable: $(this).find('Enable').text(),
                    Optional: $(this).find('Optional').text()
                }
                if (item.EventType == 'Navigate') startUrl = item.Data
                macroEvents.push(item)
            })

            if (macroEvents.length > 0 && startUrl != null) {
                var $form = $('#macro_form')
                var values = $form.form('get values')
                ptk_app.recorder.replay({
                    url: startUrl,
                    events: macroEvents,
                    validateRegex: (values['enable_regex'] == 'on') ? values['playback_regex'] : null
                })
            } else {
                $('#macro_error_message').text("Recorded macro is empty. Export or copy and paste a macro to replay")
                $('.mini.modal').modal('show')
            }
        } catch (e) {
            $('#macro_error_message').text("Could not parse XML\n" + e.message)
            $('.mini.modal').modal('show')
        }
    })

    $('.macro_download').on('click', function () {
        try {
            var xml = editor.getValue()
            if (xml == "") macroController.export()
            xml = editor.getValue()
            var xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                $events = $xml.find("MacroEvent")
            if ($events.length > 0) {
                setTimeout(function (firstEvent) {
                    var blob = new Blob([editor.getValue()], { type: 'text/plain' })
                    var fName = "PenTestKitMacro.rec"

                    var url = $(firstEvent).find('Data').text()
                    if (url) {
                        var a = document.createElement('a')
                        a.href = url
                        fName = 'PTK_' + a.hostname + '.rec'
                    }

                    var downloadLink = document.createElement("a")
                    downloadLink.download = fName
                    downloadLink.innerHTML = "Download File"
                    downloadLink.href = window.URL.createObjectURL(blob)
                    downloadLink.click()
                }, 100, $events[0])
            } else {
                $('#macro_error_message').text("Recorded macro is empty. Record a macro before download")
                $('.mini.modal').modal('show')
            }
        } catch (e) {
            $('#macro_error_message').text("Could not parse XML\n" + e.message)
            $('.mini.modal').modal('show')
        }
    })

    $('.question').popup()
    $('.ui.accordion').accordion()

    if (ptk_app.recorder.savedMacro != "") {
        var $form = $('#macro_form')
        $form.form('set value', 'recording_output', ptk_app.recorder.savedMacro)
        editor.setOption("mode", "application/xml")
        editor.setValue(ptk_app.recorder.savedMacro)
    } else {
        macroController.export()
    }
    //macroController.checkFrames()
})


browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptkBackgroundToPopup" && message.type == "recording completed") {
        macroController.export()
    }
})