/* Author: Denis Podgurskii */

import { ptk_controller_traffic } from "./controller/traffic.js"
const controller = new ptk_controller_traffic()

jQuery(function () {

    var $form = $('#traffic_form');

    controller.init().then(function (result) {
        $(document).trigger("init_form")
        if (result.recording?.recordingRequests) {
            $(document).trigger("analyse")
        }
    })

    $(document).on("init_form", function (e, data) {
        browser.tabs.query({ currentWindow: true, active: true })
            .then(function (tabs) {
                let tab = tabs[0]
                if (tab && !tab.url.startsWith('chrome://')) $form.form('set value', 'url', tab.url)
            })

        $form.form({
            inline: true,
            fields: {
                url: {
                    identifier: 'url',
                    rules: [{
                        prompt: 'URL is required in the format http://example.com or https://120.0.0.1',
                        type: 'regExp',
                        value: /^((http|https):\/\/){1}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])?(:+[0-9]+)?([\/\?]{1}.*)?$/i,
                    }]
                }
            }
        })

        $('form').form('reset')
        $('form').form('clear')
        $("#diagramSVG").html("")
        $("#auth_rating").css("display", "none")
        $("#macro_rating").attr('data-rating', 0)
        $("#traffic_rating").attr('data-rating', 0)
        $("#basic_rating").attr('data-rating', 0)
        $("#bearer_rating").attr('data-rating', 0)
        $("#token_rating").attr('data-rating', 0)
    })

    $(document).on("analyse", function (e, data) {

        let result = controller.analyse().then(function (result) {
            let diagramContent = "participant Browser\n"
            $("#diagramSVG").html("")
            let cookieIn = 0, authHeaderBasicIn = 0, authHeaderBearerIn = 0, tokenIn = 0

            result.forEach(function (item) {
                if (item.browser) {
                    if (item.browser.cookie) {
                        cookieIn++;
                        diagramContent += "Browser->Server: Host: " + item.hostname.substring(0, 30) + "...\n";
                        diagramContent += "Note right of Browser: Cookie: " + item.browser.cookie.item.value.substring(0, 20) + "...\n";
                    }
                    if (item.browser.authorization) {
                        if (item.browser.authorization.item.value.toLowerCase().includes('basic')) authHeaderBasicIn++;
                        else if (item.browser.authorization.item.value.toLowerCase().includes('bearer')) authHeaderBearerIn++;
                        else tokenIn++;
                        diagramContent += "Browser->Server: Host: " + item.hostname.substring(0, 30) + "...\n";
                        diagramContent += "Note right of Browser: Authorization: " + item.browser.authorization.item.value.substring(0, 15) + "...\n";
                    }
                }
                if (item.server) {
                    if (item.server.cookie) {
                        cookieIn++;
                        diagramContent += "Server-->Browser: Host: " + item.hostname.substring(0, 30) + "...\n";
                        diagramContent += "Note left of Server: Set-Cookie: " + item.server.cookie.item.value.substring(0, 15) + "...\n";
                    }
                    if (item.server.token) {
                        tokenIn++;
                        diagramContent += "Server-->Browser: Host: " + item.hostname.substring(0, 30) + "...\n";
                        diagramContent += "Note left of Server: Token: " + item.server.token.item.substring(0, 15) + "...\n";
                    }
                }
            });

            if (diagramContent != "") {
                var diagram = Diagram.parse(diagramContent);
                $("#trafficView").css("display", "none");
                $("#diagramView").css("display", "block");
                $("#auth_rating").css("display", "block");

                diagram.drawSVG("diagramSVG", { theme: 'simple' });
                if (cookieIn) {
                    $("#macro_rating").attr('data-rating', 5);
                    $("#traffic_rating").attr('data-rating', 4);
                }
                if (authHeaderBasicIn) {
                    $("#basic_rating").attr('data-rating', 5);
                }
                if (authHeaderBearerIn) {
                    $("#bearer_rating").attr('data-rating', 5);
                }
                if (tokenIn) {
                    $("#token_rating").attr('data-rating', 5);
                }

                $('.rating').rating('disable');
            }
        })

    })

    $('.start, .start_clean_cookie').on('click', function (e) {
        $form.form('validate form')
        if ($form.form('is valid')) {
            try {
                let url = new URL($form.form('get value', 'url'))
                controller.start(Boolean(this.attributes['data-value'].value), url.toString())
            } catch (e) {
                $('#macro_error_message').text("Could start recording " + e.message)
                $('.mini.modal').modal('show')
            }
        }
    })

    $('.reset_recording').on('click', function () {
        controller.reset().then(function (result) {
            $(document).trigger("init_form")
        })
    })

    ///////// Traffic /////////

    $('.harview').on('click', function () {

        var harLog = controller.export()
        $('#dialogHarView').modal('show');
        var outputHolderEl = document.getElementById("output")
        var pageSelectorEl = document.getElementById("page-selector")
        var legendHolderEl = document.getElementById("legendHolder")
        controller.setup({
            pageSelector: pageSelectorEl,
            legendHolder: legendHolderEl,
            showUserTiming: true,
            // showUserTimingEndMarker: true,
        }, "fileinput", outputHolderEl, harLog);
    });

    // $('.traffic_export').on('click', function () {
    //     bgProxy.Recorder.analyze();
    //     var harLog = bgProxy.Exporter.renderHar(bgProxy.Recorder.recordingRequests);
    //     if (harLog) {
    //         $form.form('set value', 'recording_output', JSON.stringify(harLog, null, 2));
    //         editor.setOption("mode", "javascript/json");
    //         editor.setValue(JSON.stringify(harLog, null, 2));
    //     } else {
    //         $('#traffic_error_message').text("Recorded traffic is empty. Record a sequence or authentication to download");
    //         $('.mini.modal').modal('show');
    //         return;
    //     }
    // });

    $('.traffic_download').on('click', function () {
        $('.traffic_export').trigger('click');
        var blob = new Blob([editor.getValue()], { type: 'text/plain' });
        var values = $form.form('get values');
        var fName = "PenTestKitTraffic.har";

        var hostname = controller.recording.startUrl;
        var values = $form.form('get values');
        if (values['url'] != "" && hostname == "") {
            var a = document.createElement('a');
            a.href = values['url'];
            hostname = a.hostname;
        }
        if (hostname) fName = 'PTK_' + hostname + '.har';

        if (blob.size > 0) {
            var downloadLink = document.createElement("a");
            downloadLink.download = fName;
            downloadLink.innerHTML = "Download File";
            downloadLink.href = window.URL.createObjectURL(blob);
            downloadLink.click();
        }
    });

    // var result = bgProxy.Recorder.analyze();
    // if (Object.keys(result).length > 0) {
    //     $('.analyze').trigger('click');
    // }

});



controller.setup = function (options, fileinputId, outputHolder, harLog) {

    /**
        * This is where the magic happens
        */
    function renderPerfCascadeChart(logData) {
        /** remove all children of `outputHolderEl`,
         * so you can upload new HAR files and get a new SVG  */
        while (outputHolder.childNodes.length > 0) {
            outputHolder.removeChild(outputHolder.childNodes[0])
        }

        /** pass HAR and options to `newPerfCascadeHar` to generate the SVG element*/
        var perfCascadeSvg = window.perfCascade.fromHar(logData, options)

        /** append SVG to page - that's it */
        outputHolder.appendChild(perfCascadeSvg)
    }


    /** handle client side file upload via file-reader */
    function onFileSubmit(evt) {
        var files = evt.target.files
        if (!files) {
            alert("Failed to load HAR file")
            return
        }

        // Just needed for zipped *.zhar files, you can use the standard FileReader api for normal .har files
        perfCascadeFileReader.readFile(files[0], evt.target.value, function (error, data) {
            if (error) {
                console.error(error)
            } else {
                renderPerfCascadeChart(data)
            }
        }, function (progress) {
            console.log("unzip progress: ", progress / 100, "%");
        })
    }

    // if (window["fetch"]) {/** load an initial HAR when opening the page */
    //     window["fetch"](harLog)
    //         .then(f => f.json().then(j => renderPerfCascadeChart(j.log)))
    // }
    if (harLog) renderPerfCascadeChart(harLog);

    /** hook up file input events */
    document.getElementById(fileinputId).addEventListener("change", onFileSubmit, false)
}


browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptkBackgroundToPopup" && message.type == "recording completed") {
        var result = bgProxy.Recorder.analyze();
        if (Object.keys(result).length > 0) {
            $('.analyze').trigger('click');
        }
    }
});