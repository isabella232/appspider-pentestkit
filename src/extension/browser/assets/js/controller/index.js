/* Author: Denis Podgurskii */
import { HttpHeadersCheck } from "../../../../../assets/js/modules/passive/headers.js"

/* Index controller instance */
export var indexController = {
    _tabObj: {},
    _requestHeaders: {},
    _responseHeaders: {},
    _owaspPassive: {},
    _wappalyzerInfo: {},

    bindPages: function (tab) {
        this._tabObj = tab
        this.bindInfo(tab)
        this.bindTechnologies()
        this.bindFrames()
        this.bindOWASP()
    },

    bindInfo: function (tabObj) {
        try {
            var $form = $('#dashboard_form')
            if (ptk_app.tabs.isTabsCapturingActive) {
                $form.form('set value', 'deactivate_capturing', false)
                if (tabObj && tabObj.tab && tabObj.tab.url) {
                    $('#dashboard_message_text').text(tabObj.tab.url)
                } else {
                    $('#dashboard_message_text').text('Active tab has not been initialized. Try to reload the tab and re-open the extension.')
                }
            } else {
                $form.form('set value', 'deactivate_capturing', true)
                $('#dashboard_message_text').html(`Tabs capturing disabled.
            <button class="ui left black floated small button " id="activate_btn" style="height: 25px
            padding-top: 6px">Enable it now</button> and reload the tab.`)
                $('#activate_btn').on('click', e => {
                    ptk_app.tabs.activateTabsCapturing()
                })
            }
        } catch (e) { }

    },

    bindWebSocketMessage: function (msg, type) {
        //$('#websocket').text(type + " : " + msg)
        $('#websocket_traffic').val(function (i, text) {
            var text = text + "\r\n"
            text += type + " : " + msg
            return text
        })
    },

    bindTechnologies: function () {
        var jsonobj = JSON.parse(this._tabObj.clientApps)
        var dt = new Array()
        for (var k in jsonobj.apps) {
            let link = '<a target="_blank" href="https://www.cvedetails.com/google-search-results.php?q=' + k + '+' + jsonobj.apps[k] + '"><i class="external alternate icon"></i></a>'
            dt.push([k, jsonobj.apps[k], link])
        }
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{ width: "50%" }, { width: "40%" }, { width: "10%" }]
        }
        bindTable('#tbl_technologies', params)
    },

    bindOWASP: function () {
        HttpHeadersCheck.checkSecurityHeaders(this._tabObj)
        var params = {
            "data": HttpHeadersCheck.findings,
            "columns": [{ width: "30%" }, { width: "70%" }]
        }
        bindTable('#tbl_owasp', params)

    },

    getUrlList: function () {
        if (!this._tabObj || !this._tabObj.frames) return null

        var dt = new Array()
        //create data source
        this._tabObj.frames.forEach((frame, key) => {
            frame.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    if (!dt.includes(request.url))
                        dt.push(request.url)
                })
            })
        })
        return dt
    },

    getDomainList: function () {
        if (!this._tabObj || !this._tabObj.frames) return null

        var dt = new Array()
        //create data source
        this._tabObj.frames.forEach((frame, key) => {
            frame.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        var hostname = (new URL(request.url)).hostname
                        if (!dt.includes(hostname)) dt.push(hostname)
                    } catch (e) { }
                })
            })
        })
        return dt
    },

    bindFrames: function () {
        if (!this._tabObj || !this._tabObj.frames) return

        var dt = new Array()
        //create data source
        this._tabObj.frames.forEach((frame, key) => {
            var i = 0, data = {}, ip = ''
            frame.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        if (i == 0) {
                            ip = request.ip ? request.ip : ''
                            var parser = document.createElement('a')
                            parser.href = request.url
                            data.frame = request.parentFrameId == -1 ? "main" : "iframe"
                            data.url = parser.hostname
                        }
                        if (request.ip && ip.indexOf(request.ip) < 0) ip += ", " + request.ip
                        i++
                    } catch (e) { }

                })
            })
            dt.push(['', key, data.frame, data.url, ip])
        })
        dt = dt.sort(function (a, b) {
            if (a[2] < b[2]) { return 1 }
            if (a[2] > b[2]) { return -1 }
            return 0
        })
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function (data, type, row) {
                    return '<i class="expandchild plus square icon"></i>'
                },
                "className": "expandbtn"

            }, { "visible": false }, { title: "Frame" }, { title: "Url" }, { title: "IP", class: "frameIP" }]
        }
        var table = bindTable('#tbl_frames', params)

        $('.expandchild.plus.icon').on('click', (function () {
            var tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data()
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide()
                $(this).removeClass('shown minus')
                $(this).addClass('shown plus')
            } else {
                // Open this row
                row.child(
                    `<div style="padding-left: 45px">
                        <table class="ui celled table stackable small fullwidth" id="tbl_frame_` + values[1] + `" > 
                            <thead>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>`
                ).show()
                $(this).removeClass('shown plus')
                $(this).addClass('shown minus')
                indexController.bindRequests(values[1])
            }
        })
        $('.expandchild.plus.icon:first').trigger('click')

    },


    bindRequests: function (index) {
        var dt = new Array()
        this._tabObj.frames.get(index).forEach((requests, key) => {
            var i = 0
            requests.forEach((request, k) => {
                var parser = document.createElement('a')
                parser.href = request.url
                dt.push(['', i, key, request.frameId, parser.hostname.substr(0, 40), parser.pathname.substr(0, 40), request.method, request.statusCode ? request.statusCode : '',
                    request.type, request.ip ? request.ip : ''
                ])
                i++
            })

        })

        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function (data, type, row) {
                    return '<div class="ui basic icon small button request_details"><i class="keyboard large icon" title="Send to request builder"></i></div>'
                }
            }, { "visible": false }, { "visible": false }, { "visible": false }, { title: "Host" }, { title: "Path" }, { title: "Method" }, { title: "Status" }, { title: "Type" }, { title: "IP" }

            ]
        }
        var tableId = '#tbl_frame_' + index
        var table = bindTable(tableId, params)

        table.columns().flatten().each(function (colIdx) {
            var title = $(table.column(colIdx).header()).text()
            if (title) {
                var select = $('<br/><input type="text" placeholder="Search ' + title + '" />')
                    .appendTo(
                        table.column(colIdx).header()
                    )
                    .on('keyup change clear', function () {
                        table
                            .column(colIdx)
                            .search($(this).val())
                            .draw()
                    })
            }
        })
    },

    run: async function () {
        let self = this
        return browser.tabs.query({ active: true, currentWindow: true }).then(function (tabs) {
            self.tabId = tabs[0].id
            self.url = tabs[0].url
            return browser.tabs.sendMessage(self.tabId, {
                channel: "ptk_popup2content",
                type: "init"
            }).then(response => {
                self._wappalyzerInfo = response
                return self.complete()
            })
        })
    },

    complete: async function (tab, request) {
        return browser.runtime.sendMessage({
            channel: "ptk_popup2background",
            type: "analyze",
            tabId: this.tabId,
            url: this.url,
            info: this._wappalyzerInfo
        }).then(response => {
            console.log(response)
            return response
        })
    }


}
