/* Author: Denis Podgurskii */

(function () {
    if (window.ptk_replayer || typeof browser === typeof undefined) return

    let isIframe = false
    try {
        isIframe = window.self !== window.top
    } catch (e) {
        isIframe = true
    }

    let windowIndex = window.opener ? 1 : 0
    let frameIndex = -1
    let framesCollection = [];

    if (isIframe) {
        let currentWindow = window
        let currentParentWindow
        while (currentWindow !== window.top) {
            currentParentWindow = currentWindow.parent
            for (let idx = 0; idx < currentParentWindow.frames.length; idx++)
                if (currentParentWindow.frames[idx] === currentWindow) {
                    frameIndex = idx
                    currentWindow = currentParentWindow
                    break
                }
        }
    } else {

        let frames = document.getElementsByTagName('iframe');
        if (frames && frames.length) {
            for (let i = 0; i < frames.length; i++) {
                let item = {
                    index: i, name: frames[i].name ? frames[i].name : "",
                    id: frames[i].id ? frames[i].id : "",
                    title: frames[i].title ? frames[i].title : ""
                }
                framesCollection.push(item);
            }
        }

    }


    class ptk_replayer {
        constructor() {
            browser.storage.local.get(['ptk_replay', 'ptk_replay_items', 'ptk_replay_step']).then(function (result) {
                this.items = result.ptk_replay_items
                this.step = result.ptk_replay_step
                if (!isIframe) {
                    this.start()
                } else if (result.ptk_replay_step > 0) {
                    window.parent.postMessage({ channel: "2top", message: 'start' }, '*')
                }
            }.bind(this))
        }


        start() {
            if (this.step >= this.items.length) {
                this.stop()
                return
            }
            this.doStep()
        }

        next() {
            if (isIframe) window.parent.postMessage({ channel: "2top", message: 'start' }, '*')
            else this.doStep()
        }

        stop() {

        }

        doStep() {
            browser.storage.local.get(['ptk_replay_step', 'ptk_replay_items']).then(function (result) {
                this.step = result.ptk_replay_step
                this.items = result.ptk_replay_items
                
                if (this.step >= this.items.length) {
                    this.stop()
                    return
                }

                let item = this.items[this.step]
              
                if (item.ElementPath.includes('//IFRAME')) {
                    if (!isIframe) {
                        window.frames[item.FrameIndex].postMessage({ channel: "2frame", message: 'doStep' }, '*')
                        return
                    }
                    let [eventIframeName, xpath] = item.ElementPath.split('|||>')
                    item.ElementPath = xpath.replace('xpath=','')
                }

                let eventType = item.EventType.toLowerCase()
                this.handler = this[eventType]
                switch (eventType) {
                    case "driverclick":
                    case "onclick":
                        this.handler = this.click
                        break
                    case "driversetcontrolvalue":
                    case "setcontroldata":
                        this.handler = this.type
                        break
                }
                if (item.WindowIndex == windowIndex) {
                    this.handler(item)
                }
            }.bind(this))

        }

        navigate(item) {
            this.step++
            browser.storage.local.set({ "ptk_replay_step": this.step }).then(function () {
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(this.next()) }, item.Duration) })
            }.bind(this))
        }

        delay(item) {
            this.step++
            browser.storage.local.set({ "ptk_replay_step": this.step }).then(function () {
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(this.next()) }, item.Duration) })
            }.bind(this))
        }

        click(item) {
            this.step++
            console.log('click' + this.step)
            browser.storage.local.set({ 'ptk_replay_step': this.step }).then(function () {
                let element = this.getElementByXpath(item)
                if (element) {
                    element.click()
                } else if (item.Optional == 0) {
                    alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')')
                }
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(this.next()) }, item.Duration) })
            }.bind(this))
        }

        type(item) {

            this.step++
            browser.storage.local.set({ "ptk_replay_step": this.step }).then(function () {
                let element = this.getElementByXpath(item)
                if (element) {
                    element.value = item.Data
                } else if (item.Optional == 0) {
                    alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')')
                }
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(this.next()) }, item.Duration) })
            }.bind(this))
        }

        javascript(item) {
            this.step++
            browser.storage.local.set({ "ptk_replay_step": this.step }).then(function () {
                let element = this.getElementByXpath(item)
                if (element) {
                    eval(item.Data)
                } else if (item.Optional == 0) {
                    alert('Could not execute javascript on ( Xpath: ' + item.ElementPath + ')')
                }
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(this.next()) }, item.Duration) })
            }.bind(this))
        }

        getElementByXpath(item) {
            let xpath = item.ElementPath
            xpath = xpath.replace('xpath=', '').replace(/\[(\d+)\]/g, function (fullMatch, n) { return "[" + (Number(n) + 1) + "]"; })
            if (!xpath.startsWith('//')) xpath = '/' + xpath
            return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
        }

        getFrameIndex(path) {
            let [eventIframeName, xpath] = path.split('|||>')
            for (let i = 0; i < framesCollection.length; i++) {
                if (eventIframeName.includes('id="' + framesCollection[i].id + '"') ||
                    eventIframeName.includes('name="' + framesCollection[i].name + '"') ||
                    eventIframeName.includes('title="' + framesCollection[i].title + '"')) {

                    return [framesCollection[i].index, xpath]
                }
            }
            return [-1, null]
        }

    }

    window.ptk_replayer = new ptk_replayer()


    window.addEventListener("message", (event) => {
        if (isIframe && event.data.channel == '2frame' && event.data.message == 'doStep') {
            window.ptk_replayer.doStep()
        }
        if (!isIframe && event.data.channel == '2top' && event.data.message == 'start') {
            window.ptk_replayer.start()
        }
    })

})()


