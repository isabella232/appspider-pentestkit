/* Author: Denis Podgurskii */

(function () {
    if (window.ptk_replayer || typeof browser === typeof undefined) return

    let isIframe = false
    try {
        isIframe = window.self !== window.top
    } catch (e) {
        isIframe = true
    }

    let windowIndex = window.opener ? 1 : 0


    class ptk_replayer {
        constructor() {
            browser.storage.local.get(['ptk_replay', 'ptk_replay_items', 'ptk_replay_step', 'ptk_replay_regex']).then(function (result) {
                if (result.ptk_replay_step == -1) return
                this.items = result.ptk_replay_items
                this.step = result.ptk_replay_step
                this.regex = result.ptk_replay_regex
                
                if (!isIframe && !windowIndex) {
                    this.start()
                } else if (windowIndex) {
                    window.opener.postMessage({ channel: "child2opener", message: 'init' }, '*')
                }
            }.bind(this))
        }

        // getFrameIndex(path) {
        //     let [eventIframeName, xpath] = path.split('|||>')
        //     for (let i = 0; i < framesCollection.length; i++) {
        //         if (eventIframeName.includes('id="' + framesCollection[i].id + '"') ||
        //             eventIframeName.includes('name="' + framesCollection[i].name + '"') ||
        //             eventIframeName.includes('title="' + framesCollection[i].title + '"')) {

        //             return [framesCollection[i].index, xpath]
        //         }
        //     }
        //     return [-1, null]
        // }


        async start() {
            while (this.step < this.items.length) {
                let item = this.items[this.step]
                await new Promise((resolve, reject) => { setTimeout(() => { resolve(true) }, item.Duration) }).catch(e => console.log(e))
                if (item.ElementPath.includes('//IFRAME')) {
                    let [eventIframeName, xpath] = item.ElementPath.split('|||>')
                    item.ElementPath = xpath.replace('xpath=', '')
                    window.frames[item.FrameIndex].postMessage({ channel: "2frame", message: 'doStep', step: this.step, item: item }, '*')
                } else if (item.WindowIndex == windowIndex) {
                    this.doStep(this.step, item)
                } else if (this.childWindow) {
                    this.childWindow.postMessage({ channel: "2child", message: 'doStep', step: this.step, item: item }, '*')
                }
                this.step++
            }
            this.stop()
        }

        stop() {
            if (this.regex) {
                var regex = new RegExp(this.regex);
                if (regex.test(document.body.innerHTML)) {
                    var str = regex.exec(document.body.innerHTML);
                    alert('Successfully match: ' + str[0]);
                } else {
                    alert('Match not found');
                }
            }
            browser.storage.local.set({ "ptk_replay_step": -1 })
        }

        doStep(step, item) {
            if (!item) return

            this.step = step
            let eventType = item.EventType.toLowerCase()
            this.handler = this[eventType]

            browser.storage.local.set({ "ptk_replay_step": (this.step + 1) }).then(function () {
                this.handler(item)
            }.bind(this))
        }

        navigate(item) { }

        delay(item) { }

        driverclick(item) { this.click(item) }
        onclick(item) { this.click(item) }
        click(item) {
            let element = this.getElementByXpath(item)
            if (element) {
                element.click()
            } else if (item.Optional == 0) {
                alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')')
            }
        }

        driversetcontrolvalue(item) { this.type(item) }
        setcontroldata(item) { this.type(item) }
        type(item) {
            let element = this.getElementByXpath(item)
            if (element) {
                element.value = item.Data
            } else if (item.Optional == 0) {
                alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')')
            }
        }

        javascript(item) {
            let element = this.getElementByXpath(item)
            if (element) {
                try {
                    eval(item.Data)
                } catch (e) {
                    if (item.Optional == 0) alert('Could not execute javascript: ' + e.message)
                }
            }
        }

        getElementByXpath(item) {
            let xpath = item.ElementPath
            xpath = xpath.replace('xpath=', '').replace(/\[(\d+)\]/g, function (fullMatch, n) { return "[" + (Number(n) + 1) + "]"; })
            if (!xpath.startsWith('//')) xpath = '/' + xpath
            return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
        }

    }

    window.ptk_replayer = new ptk_replayer()


    window.addEventListener("message", (event) => {
        if (!isIframe && event.data.channel == 'child2opener' && event.data.message == 'init') {
            window.ptk_replayer.childWindow = event.source
        }
        if (isIframe && event.data.channel == '2frame' && event.data.message == 'doStep') {
            window.ptk_replayer.doStep(event.data.step, event.data.item)
        }
        if (!isIframe && event.data.channel == '2child' && event.data.message == 'doStep') {
            window.ptk_replayer.doStep(event.data.step, event.data.item)
        }
    })

})()


