/* Author: Denis Podgurskii */

(function () {
    if (window.ptk_recorder || typeof browser === typeof undefined) return

    let isIframe = false
    try {
        isIframe = window.self !== window.top
    } catch (e) {
        isIframe = true
    }

    let windowIndex = window.opener ? 1 : 0
    let frameIndex = -1
    let framesCollection = [];

    if (isIframe) {
        let currentWindow = window
        let currentParentWindow
        while (currentWindow !== window.top) {
            currentParentWindow = currentWindow.parent
            for (let idx = 0; idx < currentParentWindow.frames.length; idx++)
                if (currentParentWindow.frames[idx] === currentWindow) {
                    frameIndex = idx
                    currentWindow = currentParentWindow
                    break
                }
        }
    } else {

        let frames = document.getElementsByTagName('iframe');
        if (frames && frames.length) {
            for (let i = 0; i < frames.length; i++) {
                let item = {
                    index: i, name: frames[i].name ? frames[i].name : "",
                    id: frames[i].id ? frames[i].id : "",
                    title: frames[i].title ? frames[i].title : ""
                }
                framesCollection.push(item);
            }
        }

    }






    class ptk_replayer {
        constructor() {
            browser.storage.local.get(['ptk_replay', 'ptk_replay_items', 'ptk_replay_step']).then(function (result) {
                this.items = result.ptk_replay_items
                this.step = result.ptk_replay_step
                if (!isIframe) {
                    this.start()
                }
            }.bind(this))
        }

        start() {
            if (this.step >= this.items.length) {
                this.stop()
                return
            }



            let item = this.items[this.step]
            let eventType = item.EventType.toLowerCase()
            this.handler = this[eventType]

            switch (eventType) {
                case "driverclick":
                case "onclick":
                    this.handler = this.click
                    break
                case "driversetcontrolvalue":
                case "setcontroldata":
                    this.handler = this.type
                    break
            }
            console.log(this.step)
            console.log(item)
            if (item.WindowIndex == windowIndex) {
                console.log('handler')
                this.handler(item)
            }
        }

        stop() {

        }

        navigate(item) {
            let self = this
            self.step++
            browser.storage.local.set({ "ptk_replay_step": self.step }).then(function () {
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(self.start()) }, item.Duration) })
            })
        }

        delay(item) {
            let self = this
            self.step++
            browser.storage.local.set({ "ptk_replay_step": self.step }).then(function () {
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(self.start()) }, item.Duration) })
            })
        }

        click(item) {
            let self = this
            self.step++
            browser.storage.local.set({ 'ptk_replay_step': self.step }).then(function () {
                browser.storage.local.get('ptk_replay_step').then(function (result) {
                    console.log(result)
                    let element = self.getElementByXpath(item)
                    if (element) {
                        element.click()
                    } else if (item.Optional == 0) {
                        alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')');
                    }
                    return new Promise((resolve, reject) => { setTimeout(() => { resolve(self.start()) }, item.Duration) })
                })
            })
        }

        type(item) {
            let self = this
            self.step++
            browser.storage.local.set({ "ptk_replay_step": self.step }).then(function () {
                let element = self.getElementByXpath(item)
                if (element) {
                    element.value = item.Data;
                    element.dispatchEvent(new Event('change', { bubbles: true }));
                } else if (item.Optional == 0) {
                    alert('Could not execute click on ( Xpath: ' + item.ElementPath + ')');
                }
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(self.start()) }, item.Duration) })
            })
        }

        javascript(item) {
            let self = this
            self.step++
            browser.storage.local.set({ "ptk_replay_step": self.step }).then(function () {
                let element = self.getElementByXpath(item)
                if (element) {
                    eval(item.Data)
                } else if (item.Optional == 0) {
                    alert('Could not execute javascript on ( Xpath: ' + item.ElementPath + ')');
                }
                return new Promise((resolve, reject) => { setTimeout(() => { resolve(self.start()) }, item.Duration) })
            })
        }

        getElementByXpath(item) {
            let xpath = item.ElementPath
            xpath = xpath.replace('xpath=', '').replace(/\[(\d+)\]/g, function (fullMatch, n) { return "[" + (Number(n) + 1) + "]"; })
            if (!xpath.startsWith('//')) xpath = '/' + xpath
            return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
        }

    }

    window.ptk_replayer = new ptk_replayer()


    window.addEventListener("message", (event) => {
        // if (!isIframe && event.data.channel == 'sync') {
        //     if (window.ptk_recorder?.testcase) window.ptk_recorder.testcase.sync(event.data.items)
        // }
    })

    window.addEventListener('beforeunload', (event) => {
        // if (!isIframe && window.ptk_recorder?.testcase) {
        //     let evtDelay = new ptk_event_delay()
        //     window.ptk_recorder.testcase.append(evtDelay)
        // }
    })



})()


