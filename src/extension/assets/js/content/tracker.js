
if (!document.getElementById('ptk_recording_control') && !window.opener) {

    browser.storage.local.get(['ptk_recording', 'ptk_replay', 'ptk_recording_items', 'ptk_replay_step']).then(function (result) {



        if (result.ptk_recording_items?.length == 0 || result.ptk_replay_step == 0) {
            let msg = "You are now recording a macro/traffic sequence. Confirm?"
            if (result.ptk_replay && result.ptk_replay_step == 0) {
                msg = "You are now starting a macro replay. Confirm?"
            }
            var r = confirm(msg)
            if (r == false) {
                return browser.runtime.sendMessage({
                    channel: "ptk_popup2background_recorder",
                    type: "cancel_recording"
                }).catch(e => e)
                return
            }
        }

        let popupHtml = document.getElementById('ptk_recording_control')

        let icon = browser.runtime.getURL('browser/assets/images/icon_rec.png')
        let msg = "Recording"
        if (result.ptk_replay?.mode == 'replay') {
            msg = "Replay"
            icon = browser.runtime.getURL('browser/assets/images/icon_play.png')
        }

        popupHtml = document.createElement('div')
        popupHtml.id = 'ptk_recording_control';
        popupHtml.innerHTML = `
        <style>
        #ptk_recording_control {
            position: fixed;
            bottom: 10px;
            right: 10px;
            width: 220px;
            height: 48px;
            border-radius: 25px;
            z-index: 10000;
            background: rgb(214, 201, 201);
            display: flex;
            transition:  0.3s;
        }

        #ptk_recording_control_icon {
            width: 44px;
            height: 44px;
            border-radius: 25px;
            z-index: 10000;
            animation: 3s blinker linear infinite;
            -webkit-animation: 3s blinker linear infinite;
            -moz-animation: 3s blinker linear infinite;
            background-image: url('${icon}');
            background-color: black;
            background-position: center;
            background-repeat: no-repeat;
            background-size: 40px 40px;
            text-align: center;
            position: absolute;
            top: 2px;
            right: 2px;
            cursor: move;
        }

        #ptk_recording_control_wrapper {
            position: relative;
            height: 100%;
            width: 100%;
        }

        #ptk_recording_message{
            display: block;
            font-size: 15px;
            padding-left: 7px;
            padding-top: 16px;
            font-family: monospace;
            transition:  0.3s;
        }


        @-moz-keyframes blinker {
            0% {
                opacity: 1.0;
            }

            50% {
                opacity: 0.0;
            }

            100% {
                opacity: 1.0;
            }
        }

        @-webkit-keyframes blinker {
            0% {
                opacity: 1.0;
            }

            50% {
                opacity: 0.0;
            }

            100% {
                opacity: 1.0;
            }
        }

        @keyframes blinker {
            0% {
                opacity: 1.0;
            }

            50% {
                opacity: 0.0;
            }

            100% {
                opacity: 1.0;
            }
        }
    </style>
    <div id="ptk_recording_control_wrapper">
        <div id="ptk_recording_message">${msg}</div>
        <div id="ptk_recording_control_icon"></div>
    </div>

        `;

        (document.documentElement).appendChild(popupHtml)

        let popupScript = document.createElement('script')
        popupScript.textContent = `
        (function () {
            let moving = false
            let SCROLL_WIDTH = 24,
                offset = { x: 0, y: 0 }
            let ptk_recording_control = document.getElementById("ptk_recording_control")

            ptk_recording_control.addEventListener('mouseenter', mouseEnter, true)
            ptk_recording_control.addEventListener('mouseleave', mouseLeave, true)
            ptk_recording_control.addEventListener('mousedown', mouseDown, false)
            window.addEventListener('mouseup', mouseUp, false)


            function mouseEnter() {
                document.getElementById('ptk_recording_message').style.display = "none"
                document.getElementById('ptk_recording_control').style.width = "48px"
            }
            function mouseLeave() {
                setTimeout(function () {
                    if (!moving){
                        document.getElementById('ptk_recording_control').style.width = "220px"
                        document.getElementById('ptk_recording_message').style.display = "block"
                    }
                }, 1500)
            }

            function mouseUp() {
                moving = false
                window.removeEventListener('mousemove', popupMove, true)
            }

            function mouseDown(e) {
                moving = true
                offset.x = e.clientX - ptk_recording_control.offsetLeft
                offset.y = e.clientY - ptk_recording_control.offsetTop
                window.addEventListener('mousemove', popupMove, true)
            }

            function popupMove(e) {
                ptk_recording_control.style.position = 'fixed'
                let top = e.clientY - offset.y,
                    left = e.clientX - offset.x
                ptk_recording_control.style.top = top + 'px'
                ptk_recording_control.style.left = left + 'px'
            }
        }())
    `;
        (document.head).appendChild(popupScript)


        function showMessage(text) {
            document.getElementById('ptk_recording_message').innerHTML = text
        }

        browser.storage.onChanged.addListener(function (changes, namespace) {
            if (changes['ptk_recording_items']) {
                let changedValue = changes['ptk_recording_items'].newValue
                let item = changedValue[changedValue.length - 1]
                showMessage('Recorded: ' + item?.eventTypeName)
            }
            if (changes['ptk_replay_step']) {
                let changedValue = changes['ptk_replay_step'].newValue
                if (changedValue == -1) {
                    showMessage('Closing in: <span id="ptk_recording_timer">10</span>')
                    setInterval(function () {
                        var timer = document.getElementById('ptk_recording_timer');
                        var val = parseInt(timer.innerText)
                        timer.innerText = val - 1
                    }, 1000)
                    setTimeout(function () {
                        browser.runtime.sendMessage({
                            channel: "ptk_popup2background_recorder",
                            type: "stop_replay"
                        }).catch(e => e)
                    }, 10000)
                } else {
                    showMessage('Executing step: ' + changedValue)
                }

            }
        })
    })

}