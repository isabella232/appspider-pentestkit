'use strict';
(function () {


    var frames = document.getElementsByTagName('iframe');
    var framesCollection = [];
    if (frames && frames.length) {
        for (let i = 0; i < frames.length; i++) {
            var item = {
                index: i,
                name: frames[i].name ? frames[i].name : "",
                id: frames[i].id ? frames[i].id : "",
                title: frames[i].title ? frames[i].title : ""
            }
            framesCollection.push(item);
        }
    }
    browser.storage.local.set({ "ptk_recording_frames": framesCollection })


    var popupHtml = document.getElementById('PTK_RecordingMessageCenter');

    if (!popupHtml) {
        popupHtml = document.createElement('div');
        popupHtml.id = 'PTK_RecordingMessageCenter';
        popupHtml.className = 'PTK_RecordingMessageCenter';
        popupHtml.innerHTML = `
<style>
#PTK_RecordingMessageCenter {
  all: initial;
  
  line-height: 25px; text-align: center; text-decoration: none;
  font-weight: bold; -webkit-border-radius: 12px; -moz-border-radius: 12px;
  border-radius: 12px; -moz-box-shadow: 1px 1px 3px #000; -webkit-box-shadow: 1px 1px 3px #000; box-shadow: 1px 1px 3px #000;
  position: fixed; top: 10px; left: 10px; width: 280px; height: 120px; 
  z-index: 1000000000000;
  resize: both;
  overflow: hidden;
  min-width: 225px; min-height:90px; 

}
#PTK_RecordingMessageCenter_Header{
    background-color: #5c5c5c; 
    height: 35px;
}
#PTK_RecordingMessageCenter_Text{
  animation:3s blinker linear infinite;
  -webkit-animation:3s blinker linear infinite;
  -moz-animation:3s blinker linear infinite;
  color: #FFF7A8;
  width:100%;
  cursor: move;
  line-height: 37px;
}

#PTK_RecordingMessageCenter_Message{
    background: rgba(225, 226, 223, 0.88); ; color: black; line-height: 25px; text-align: center; text-decoration: none;
    height: 100%;
    font-size:12px; text-align:left; font-weigth:100;
    border-bottom-left-radius: 12px; -moz-box-shadow: 1px 1px 3px #000; -webkit-box-shadow: 1px 1px 3px #000; box-shadow: 1px 1px 3px #000;
    border-bottom-right-radius: 12px; -moz-box-shadow: 1px 1px 3px #000; -webkit-box-shadow: 1px 1px 3px #000; box-shadow: 1px 1px 3px #000;
    overflow:hidden;
}

#PTK_RecordingMessageCenter_Message div.ptk_message_table{
    display: table;
    all: initial;
    font-size: 12px;
    padding-left: 7px;
    font-family: monospace;
    line-height: 24px;
    margin-top: 100px;
    line-height:20px;
    
}

#PTK_RecordingMessageCenter_Icon{
    position: absolute; width: 30px; height: 30px; top: 1px; left: 2px; z-index:100;
}
#PTK_RecordingMessageCenter_StopIcon{
    position: absolute; width: 30px; height: 30px; top: 1px; right: 2px; z-index:100;
    cursor: pointer;
}

@-moz-keyframes blinker {  0% { opacity: 1.0; } 50% { opacity: 0.0; } 100% { opacity: 1.0; } }
@-webkit-keyframes blinker {  0% { opacity: 1.0; } 50% { opacity: 0.0; } 100% { opacity: 1.0; } }
@keyframes blinker {  0% { opacity: 1.0; } 50% { opacity: 0.0; } 100% { opacity: 1.0; } }


</style>
<div id="PTK_RecordingMessageCenter_Header">
    <img id="PTK_RecordingMessageCenter_Icon" src="` + browser.runtime.getURL('assets/images/icon.png') + `" 
  title="Penetration Testing Kit" /> 
     <span id="PTK_RecordingMessageCenter_Text">Operation in progress</span> 
    <img id="PTK_RecordingMessageCenter_StopIcon" src="` + browser.runtime.getURL('assets/images/stop.png') + `" 
  title="Stop recording" /> 
  </div>
<div id="PTK_RecordingMessageCenter_Message">
</div>
`;

        (document.documentElement).appendChild(popupHtml);

        var popupScript = document.createElement('script');
        popupScript.textContent = `
    var PTK_RecordingMessageCenter = document.getElementById('PTK_RecordingMessageCenter');
    var PTK_RecordingMessageCenter_Text = document.getElementById('PTK_RecordingMessageCenter_Text');
    PTK_RecordingMessageCenter_Text.onmousedown = function (event) {
        let shiftX = event.clientX - PTK_RecordingMessageCenter.getBoundingClientRect().left;
        let shiftY = event.clientY - PTK_RecordingMessageCenter.getBoundingClientRect().top;

        function moveAt(pageX, pageY) {
            PTK_RecordingMessageCenter.style.left = pageX - shiftX + 'px';
            PTK_RecordingMessageCenter.style.top = pageY - shiftY + 'px';
        }
        function onMouseMove(event) {
            moveAt(event.clientX, event.clientY);
        }
        document.addEventListener('mousemove', onMouseMove);
        PTK_RecordingMessageCenter_Text.onmouseup = function (event) {
            document.removeEventListener('mousemove', onMouseMove);
            PTK_RecordingMessageCenter_Text.onmouseup = null;
        };
    };
`;
        (document.head).appendChild(popupScript);

        document.getElementById('PTK_RecordingMessageCenter_StopIcon').onclick = function (event) {
            console.log(performance.getEntries())
            browser.runtime.sendMessage({
                channel: 'pentestkitAppSpiderRecorderChannel',
                function: 'stop',
                parameters: {}
            }).catch(e => e);;
        };




        function showMessage(mode, item) {
            var msg = "", eventName = "", xpath = "", fullxpath = "", cssselector = "", fullcssselector = "";
            var msgCenter = document.getElementById('PTK_RecordingMessageCenter_Message');
            document.getElementById('PTK_RecordingMessageCenter_Text').innerText = (mode == "replay" ? "Playback in progress" : "Recording in progress");
            if (mode == 'recording') {
                eventName = item.eventTypeName;
                xpath = (item.info && item.info.xpath) ? item.info.xpath : "";
                fullxpath = (item.info && item.info.fullxpath) ? item.info.fullxpath : "";
                cssselector = (item.info && item.info.cssselector) ? item.info.cssselector : "";
                fullcssselector = (item.info && item.info.fullcssselector) ? item.info.fullcssselector : "";
                msg = `   
                    <div class="ptk_message_table">
                        <div style="display: table-row;">
                            <div style="display: table-cell;">Event</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_EVENT_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;">xPath</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_XPATH_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;min-width: 90px;">Full xPath</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_FULLXPATH_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;">CSS</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_CSS_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;">Full CSS</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_fullCSS_ptk</i></div>
                        </div>
                    </div>`.replace('ptk_EVENT_ptk', eventName)
                    .replace('ptk_XPATH_ptk', xpath)
                    .replace('ptk_FULLXPATH_ptk', fullxpath)
                    .replace('ptk_CSS_ptk', cssselector)
                    .replace('ptk_fullCSS_ptk', fullcssselector);
            } else if (mode == 'replay') {
                msg = `   
                    <div class="ptk_message_table">
                        <div style="display: table-row;">
                            <div style="display: table-cell;">Step</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_STEP_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;min-width: 90px;">Event</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_EVENT_ptk</i></div>
                        </div>
                        <div style="display: table-row;">
                            <div style="display: table-cell;">xPath</div><div style="display: table-cell;">&nbsp;</div><div style="display: table-cell;"><i>ptk_XPATH_ptk</i></div>
                        </div>
                    </div>`.replace('ptk_STEP_ptk', item.replayStep)
                    .replace('ptk_EVENT_ptk', item.EventType)
                    .replace('ptk_XPATH_ptk', item.ElementPath);

            }
            msgCenter.innerHTML = msg;
        }

        window.addEventListener("message", (event) => {
            if (event.data.channelName == 'PTK_recorder_runtime' && event.data.message == 'replay completed') {
                browser.storage.local.get('ptk_recording').then(function (result) {
                    var storage = result.ptk_recording;
                    var msgCenter = document.getElementById('PTK_RecordingMessageCenter_Message');

                    msgCenter.innerHTML = `   
                    <div class="ptk_message_table">
                        <div style="display: table-row;">
                            <div style="display: table-cell;">Macro playback completed. Window will be closed in <span id="PTK_RecordingMessageCenter_Timer">10</span></div>
                        </div>
                    </div>`;
                    setInterval(function () {
                        var timer = document.getElementById('PTK_RecordingMessageCenter_Timer');
                        var val = parseInt(timer.innerText);
                        timer.innerText = val - 1;
                    }, 1000);

                    setTimeout(function () {
                        browser.runtime.sendMessage({
                            channel: 'pentestkitAppSpiderRecorderChannel',
                            function: 'stop',
                            parameters: {}
                        }).catch(e => e);;
                    }, 10000);
                });
            }
        });





        browser.storage.onChanged.addListener(function (changes, namespace) {
            if (changes['ptk_recording']) {
                var changedValue = changes['ptk_recording'].newValue;
                let item;
                if (changedValue.mode == 'recording') {
                    item = changedValue.items[changedValue.items.length - 1];
                } else if (changedValue.mode == 'replay') {
                    item = changedValue.replayItems[changedValue.replayStep - 1];
                    item.replayStep = changedValue.replayStep;
                }

                if (item) {
                    showMessage(changedValue.mode, item);
                }
            }
        });


    }


    browser.storage.local.get("ptk_recording_timing").then(function (result) {
        let entries = performance.getEntries().filter(v => ['navigation', 'resource'].includes(v.entryType))
        let storage = result.ptk_recording_timing
        let s = new Set([...storage, ...entries])
        browser.storage.local.set({
            "ptk_recording_timing": JSON.parse(JSON.stringify(Array.from(s)))
        })
    })



})();

