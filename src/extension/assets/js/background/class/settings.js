/* Author: Denis Podgurskii */
import { nestedPropery } from "../../../js/lib/nested-property.js"
import { ptk_utils } from "./utils.js"


export class ptk_settings {
    constructor() {
        this._reset()
    }

    _reset() {
        this.main = {
            general: {
                capture_all_requests: false,
                capture_responses: false,
                enable_logging: false,
                enable_appspider: false,
                enable_websocket: false,
                max_tabs: 5,
                max_requests_per_tab: 50,
            },
            proxy: {
                pac_protocol: "http://",
                pac_path: "",

                http_url: "",
                http_port: "",
                https_url: "",
                https_port: "",
                socks_url: "",
                socks_port: "",
                socks_type: 'socks5',

                username: "",
                password: "",

                bypass: '127.0.0.1/*, 192,168.0.1/*'
            },
            headers: {
                protocol: "HTTP/1.1",
                useragent: "Mozilla/5.0 (X11 Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 OPR/38.0.2220.41",
                accept: "*/*",
                acceptcharset: "utf-8, iso-8859-1q=0.5, *q=0.1",
                acceptlanguage: "en-US,enq=0.5",
                acceptencoding: "deflate, gzipq=1.0, *q=0.5",
                extraheaders: "",
                cookie: ""
            }
        }

        //Request builder settings
        this.requestbuilder = {
            proxy: {},
            headers: {}
        }

        //Headers page
        this.headers = {
            request: {},
            response: {}
        }

        //Macro page
        this.macro = {
            minDuration: 3000,
            elementPath: "id", //[id, fullpath]
            eventType: "javascript", //[javascript, driverclick, onclick ]
            enableRegex: false,
            validateRegex: "(sign|log)[ -]?(out|off)"
        }
    }

    updateSettings(path, value) {
        this.mergeSettings(ptk_utils.jsonSetValueByPath(this, path, value))
        browser.storage.local.set({ "pentestkit_settings": this })
    }

    resetSettings() {
        this._reset()
        browser.storage.local.set({ "pentestkit_settings": this })
    }

    mergeSettings(...sources) {
        if (!sources.length) return
        const source = sources.shift()
        for (const key in source) {
            if (typeof (source[key]) === 'object') {
                if (!this[key]) Object.assign(this, { [key]: {} })
                this.mergeSettings(this[key], source[key])
            } else {
                Object.assign(this, { [key]: source[key] })
            }
        }
        this.mergeSettings(...sources)
    }
}