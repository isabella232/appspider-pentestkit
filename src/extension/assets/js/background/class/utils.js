/* Author: Denis Podgurskii */

/* Utils */
export class ptk_utils {
    static jsonPathToValue(jsonData, path) {
        if (!(jsonData instanceof Object) || typeof (path) === "undefined") {
            throw "Not valid argument:jsonData:" + jsonData + ", path:" + path
        }
        path = path.replace(/\[(\w+)\]/g, '.$1') // convert indexes to properties
        path = path.replace(/^\./, '') // strip a leading dot
        let pathArray = path.split('.')
        for (let i = 0, n = pathArray.length; i < n; ++i) {
            let key = pathArray[i]
            if (key in jsonData) {
                if (jsonData[key] !== null) jsonData = jsonData[key]
                else return null
            } else {
                return key
            }
        }
        return jsonData
    }

    static jsonSetValueByPath(jsonData, path, value) {
        if (!(jsonData instanceof Object) || typeof (path) === "undefined") {
            throw "Not valid argument:jsonData:" + jsonData + ", path:" + path
        }
        let origData = jsonData
        path = path.replace(/\[(\w+)\]/g, '.$1') // convert indexes to properties
        path = path.replace(/^\./, '');// strip a leading dot
        let pathArray = path.split('.')
        let i = 0
        do {
            let key = pathArray[i]
            if (key in jsonData) {
                if (i < (pathArray.length - 1)) jsonData = jsonData[key]
                else jsonData[key] = value
            }
            i++
        } while (i < pathArray.length)
        return origData
    }

    static jsonGetValueByPath(jsonData, path) {
        if (!(jsonData instanceof Object) || typeof (path) === "undefined") {
            throw "Not valid argument:jsonData:" + jsonData + ", path:" + path
        }
        let origData = jsonData
        path = path.replace(/\[(\w+)\]/g, '.$1') // convert indexes to properties
        path = path.replace(/^\./, '');// strip a leading dot
        let pathArray = path.split('.')
        let i = 0
        do {
            let key = pathArray[i]
            if (key in jsonData) {
                if (i < (pathArray.length - 1)) jsonData = jsonData[key]
                else return jsonData[key]
            }
            i++
        } while (i < pathArray.length)
        return origData
    }

    static get requestFilters() {
        return ["main_frame", "sub_frame", "stylesheet", "script", "image", "font", "object", "xmlhttprequest", "ping", "csp_report", "media", "websocket", "other"]
    }

    static get extraInfoSpec() {
        return window.isFirefox ? [] : ["extraHeaders"]
    }
}


/* Logger */
export class ptk_logger {
    static debug = false;
    static log(event, msg, level) {

        if (ptk_logger.debug || level == "error") {
            console.log(event)
            if (msg instanceof Array) {
                for (m in msg) {
                    console.log(m + ": " + msg[m])
                }
            } else console.log(msg)
            console.log("Logged at: " + Date.now())
        }
    }

}



/* Notifications -- manage browser notifications */
export class ptk_notifications {
    static clearAll() {
        browser.notifications.getAll().then(function (notifications) {
            if (notifications) {
                for (let key in notifications) {
                    browser.notifications.clear(key)
                }
            }
        })
    }

    static notify(title, message, clearAll = true) {
        if (clearAll) this.clearAll()
        browser.notifications.create(
            'PTK_notification', {
            type: 'basic',
            iconUrl: browser.extension.getURL('assets/images/icon.png'),
            title: title,
            message: message
        })
    }
}