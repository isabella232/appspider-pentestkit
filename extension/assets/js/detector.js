/* Author: Denis Podgurskii */
var ptkDetector = {
    _apps: {},
    _documentHtml: document.documentElement.innerHTML,
    _cookies: {},
    _scripts: {},
    _metas: {},
    _headers: "",
    _scriptsTxt: "",


    asArray: function(value) {
        return value instanceof Array ? value : [value];
    },

    parsePatterns: function(patterns) {
        if (!patterns) return [];
        var parsed = {};
        // Convert string to object containing array containing string
        if (typeof patterns === 'string' || patterns instanceof Array) {
            patterns = {
                main: this.asArray(patterns)
            };
        }

        Object.keys(patterns).forEach(key => {
            parsed[key] = [];

            this.asArray(patterns[key]).forEach(pattern => {
                var attrs = {};

                pattern.split('\\;').forEach((attr, i) => {
                    if (i) {
                        // Key value pairs
                        attr = attr.split(':');
                        if (attr.length > 1) {
                            attrs[attr.shift()] = attr.join(':');
                        }
                    } else {
                        attrs.string = attr;
                        try {
                            attrs.regex = new RegExp(attr.replace('/', '\/'), 'i'); // Escape slashes in regular expression
                        } catch (e) {
                            attrs.regex = new RegExp();
                        }
                    }
                });
                parsed[key].push(attrs);
            });
        });

        // Convert back to array if the original pattern list was an array (or string)
        if ('main' in parsed) {
            parsed = parsed.main;
        }

        return parsed;
    },

    parseVersion: function(version, matches) {
        var versions = [];
        matches.forEach((match, i) => {
            // Parse ternary operator
            var ternary = new RegExp('\\\\' + i + '\\?([^:]+):(.*)$').exec(version);

            if (ternary && ternary.length === 3) {
                version = version.replace(ternary[0], match ? ternary[1] : ternary[2]);
            }

            // Replace back references
            version = version.trim().replace(new RegExp('\\\\' + i, 'g'), match || '');
        });

        if (version && versions.indexOf(version) === -1) {
            versions.push(version);
        }

        if (versions.length) {
            // Use the longest detected version number
            var v = versions.reduce((a, b) => a.length > b.length ? a : b);
            versions = [v];
        }
        return versions;
    },

    analyzeMeta: function(item, meta) {
        var patterns = this.parsePatterns(meta);
        for (p in patterns) {
            if (typeof this._metas[p] == 'undefined') continue;
            try {
                var pat = patterns[p][0];
                if (pat.regex == "") continue;

                if (pat.regex.test(this._metas[p])) {
                    item.found = true;
                    if (pat.version) {
                        var matches = pat.regex.exec(this._metas[p]);
                        item.versions = this.parseVersion(pat.version, matches);
                    }
                }
            } catch (e) {
                console.log("ERROR meta " + e.message);
                console.log(patterns);
            }
        }
    },

    analyzeHtml: function(item, html) {
        var patterns = this.parsePatterns(html);
        for (p in patterns) {
            try {
                var pat = patterns[p];
                if (pat.regex == "") continue;

                if (pat.regex.test(this._documentHtml)) {
                    item.found = true;
                    if (pat.version) {
                        var matches = pat.regex.exec(this._documentHtml);
                        item.versions = this.parseVersion(pat.version, matches);
                    }
                }
            } catch (e) {
                console.log("ERROR html " + e.message);
                console.log(patterns);
            }
        }
    },

    analyzeCookie: function(item, cookies) {
        var patterns = this.parsePatterns(cookies);

        for (p in patterns) {
            try {
                var pat = patterns[p][0];
                if (document.cookie.indexOf(p) < 0 || typeof this._cookies[p] == 'undefined' || pat.string == "")
                    continue;

                if (pat.regex.test(this._cookies[p])) {
                    item.found = true;
                    if (pat.version) {
                        var matches = pat.regex.exec(this._cookies[p]);
                        item.versions = this.parseVersion(pat.version, matches);
                        //FIX IT - todo
                    }
                }
            } catch (e) {
                console.log("ERROR cookie " + e.message);
                console.log(patterns);
            }
        }
    },

    analyzeScript: function(item, script) {
        var patterns = this.parsePatterns(script);
        for (p in patterns) {
            try {
                var pat = patterns[p];
                if (pat.regex == "") continue;

                if (pat.regex.test(this._scriptsTxt)) {
                    item.found = true;
                    if (pat.version) {
                        var matches = pat.regex.exec(this._scriptsTxt);
                        item.versions = this.parseVersion(pat.version, matches);
                    }
                }
            } catch (e) {
                console.log("ERROR script " + e.message);
                console.log(patterns);
            }
        }
    },

    analyzeHeaders: function(item, headers) {
        var patterns = this.parsePatterns(headers);
        for (p in patterns) {
            if (typeof this._headers[p] == 'undefined') continue;

            try {
                var pat = patterns[p][0];
                if (pat.string == "" || pat.regex == "") continue;

                if (pat.regex.test(this._headers[p])) {
                    item.found = true;
                    if (pat.version) {
                        var matches = pat.regex.exec(this._headers[p]);
                        item.versions = this.parseVersion(pat.version, matches);
                    }
                }
            } catch (e) {
                console.log("ERROR headers " + e.message);
                console.log(patterns);
            }

        }
    },

    analyzeJs: function(item, js) {
        try {
            var res = js();
            if (res != null) {
                item.found = true;
                if (res != 0) {
                    item.versions.push(res);
                }
            }
        } catch (e) {
            console.log("ERROR js " + e.message);
            console.log(js);
        }
    },

    complete: function() {
        //End analysis
        var jsonString = JSON.stringify({ apps: this._apps });
        meta = document.getElementById('pentestkitMetaId');
        meta.content = jsonString;
        var done = document.createEvent('Event');
        done.initEvent('ready', true, true)
        meta.dispatchEvent(done);
    },

    run: function(analysisType) {
        this.init();
        for (a in ptkDictionary.apps) {
            //if(a != 'CodeIgniter') continue;
            var app = ptkDictionary.apps[a];
            var item = { found: false, versions: [] };

            if (analysisType.indexOf('meta') > 0 && app.meta)
                this.analyzeMeta(item, app.meta);

            if (analysisType.indexOf('cookies') > 0 && app.cookies)
                this.analyzeCookie(item, app.cookies);

            if (analysisType.indexOf('script') > 0 && app.script)
                this.analyzeScript(item, app.script);

            if (analysisType.indexOf('html') > 0 && app.html)
                this.analyzeHtml(item, app.html);

            if (analysisType.indexOf('js') > 0 && app.js)
                this.analyzeJs(item, app.js);

            if (analysisType.indexOf('headers') > 0 && app.headers)
                this.analyzeHeaders(item, app.headers);

            if (item.found) {
                if (item.versions.length > 1)
                    item.versions = item.versions.filter(function(item, index, inputArray) {
                        return inputArray.indexOf(item) == index;
                    });
                this._apps[a] = (item.versions.length > 0) ? item.versions[0] : "";
            }

            item = { found: false, versions: [] };
        }
    },

    init: function() {
        this._apps = {};

        //init headers
        var meta = document.getElementById('pentestkitMetaId');
        this._headers = JSON.parse(meta.content);

        //init cookie
        this._cookies = {};
        if (document.cookie && document.cookie != '') {
            var split = document.cookie.split(';');
            for (var i = 0; i < split.length; i++) {
                var name_value = split[i].split("=");
                name_value[0] = name_value[0].replace(/^ /, '');
                this._cookies[decodeURIComponent(name_value[0])] = decodeURIComponent(name_value[1]);
            }
        }

        //init scripts
        this._scripts = [];

        for (i = 0; i < document.scripts.length; i++) {
            var script = document.scripts[i];
            if ((script.id && script.id.startsWith('pentestkit')) || script.src == "") continue;
            this._scripts[i] = script.src;
        }
        this._scriptsTxt = this._scripts.join(' ');

        //init meta
        var metas = document.getElementsByTagName("meta");
        if (metas.length > 0) {
            for (i = 0; i < metas.length; i++) {
                var meta = metas[i];
                if ((meta.id && script.id.startsWith('pentestkit')) || meta.name == "") continue;
                this._metas[meta.name.toLowerCase()] = meta.content;
            }
        }
    }
};


ptkDetector.run(['meta', 'cookies', 'script', 'html', 'js', 'headers']);
ptkDetector.complete();