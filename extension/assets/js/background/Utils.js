/* Author: Denis Podgurskii */
'use strict';
////////////////////////////////////
/* Utils */
////////////////////////////////////

function Utils() {
    this.jsonPathToValue = function (jsonData, path) {
        if (!(jsonData instanceof Object) || typeof (path) === "undefined") {
            throw "Not valid argument:jsonData:" + jsonData + ", path:" + path;
        }
        path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
        path = path.replace(/^\./, ''); // strip a leading dot
        var pathArray = path.split('.');
        for (var i = 0, n = pathArray.length; i < n; ++i) {
            var key = pathArray[i];
            if (key in jsonData) {
                if (jsonData[key] !== null) {
                    jsonData = jsonData[key];
                } else {
                    return null;
                }
            } else {
                return key;
            }
        }
        return jsonData;
    };

    this.jsonSetValueByPath = function (jsonData, path, value) {
        if (!(jsonData instanceof Object) || typeof (path) === "undefined") {
            throw "Not valid argument:jsonData:" + jsonData + ", path:" + path;
        }
        var origData = jsonData;
        path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
        path = path.replace(/^\./, ''); // strip a leading dot
        var pathArray = path.split('.');
        var i = 0;
        do {
            var key = pathArray[i];
            if (key in jsonData) {
                if (i < (pathArray.length - 1))
                    jsonData = jsonData[key];
                else
                    jsonData[key] = value;
            }
            i++;
        } while (i < pathArray.length)
        return origData;
    };
    
}; //end Utils

////////////////////////////////////
/* Logger */
////////////////////////////////////

function Logger() {
    this.log = function (event, msg, level) {
        if (BackgroundProxy.settings != null && BackgroundProxy.settings.main.general.enable_logging) {
            console.log("---------" + event + "---------");
            if (msg instanceof Array) {
                for (m in msg) {
                    console.log(m + ": " + msg[m]);
                }
            } else console.log(msg);
            console.log("Logged at: " + Date.now());
        }
    };

}; //end Logger


////////////////////////////////////
/* Notifications -- manage browser notifications */
////////////////////////////////////
function Notifications() {
    this.clearAll = function () {
        browser.notifications.getAll().then(function (notifications) {
            if (notifications) {
                for (let key in notifications) {
                    browser.notifications.clear(key);
                }
            }
        })
    };

    this.notify = function (title, message, clearAll = true) {
        if (clearAll) this.clearAll();
        browser.notifications.create(
            'PTK_notification', {
            type: 'basic',
            iconUrl: browser.extension.getURL('browser/assets/images/icon.png'),
            title: title,
            message: message
        });
    };
}; //end Notifications