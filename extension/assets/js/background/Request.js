/* Author: Denis Podgurskii */
'use strict';
////////////////////////////////////
/* Request */
////////////////////////////////////

function Request() {
    this.validate = function (message) {
        if (message && message.function == 'validate') {
            chrome.windows.create({
                url: chrome.extension.getURL("browser/requestbuilder.html?validateRequest=" + message.parameters),
                type: "popup",
                'width': 1200,
                'height': 700
            },
                function (win) {
                    BackgroundProxy.excludeTab(win.tabs[0].id);
                });
        }
    };

    this.buildRequestFromURL = function (requestObject) {

        /* Start */
        var schema = this.schema();

        // if (requestObject.request_url.toLowerCase().startsWith('http')) {
        //     schema.uri = new URL(requestObject.request_url);
        // } else {
        //     schema.uri = new URL(requestObject.request_url);
        //     schema.request.method = requestObject.request_method;
        //     schema.uri.protocol = requestObject.request_protocol;
        //     schema.uri.url = requestObject.request_url;
        //     schema.uri.port = requestObject.request_port;
        // }


        // if (requestURL) {
        //     schema.request.method = requestObject.request_method;
        //     schema.uri.protocol = requestObject.request_protocol;
        //     schema.uri.url = requestObject.request_url;
        //     schema.uri.port = requestObject.request_port;

        // }
        // if (requestData.length > 1 && schema.request.method != 'GET' && schema.request.method != 'HEAD') {
        //     BackgroundProxy.Logger.log(requestData);
        //     schema.request.body = requestData[1];
        // }
        // var url = schema.uri.path;
        // if (!url || !(/^https?:\/\//).test(url))
        //     url = schema.uri.protocol + '://' + schema.uri.url + ((schema.uri.port != "80" && schema.uri.port != "443") ? (":" + schema.uri.port) : "") + (schema.uri.path ? schema.uri.path : "");
        // if (schema.uri.queryString) url += schema.uri.queryString;
        // schema.request.url = url;
        // var headers = [];
        // if (headers.length == 0) {
        //     headers.push({ name: "Host", value: schema.uri.url });
        //     schema.request.host = schema.uri.url;
        // }
        // schema.request.headers = headers;
        /* End */
        return schema;
    };



    this.parseRequestString = function (requestStr, requestObject) {

        /* Start */
        var schema = this.schema();

        var requestData = requestStr.trim().split(/\n\n/);
        var headerArray = requestData[0].split(/\r?\n/);

        var headers = [];
        for (var i = 0; i < headerArray.length; i++) {
            if (headerArray[i].toUpperCase().match(/(^GET|^POST|^HEAD|^PUT|^DELETE|^OPTIONS)/)) {
                var requestArray = headerArray[i].split(' ');
                schema = this.parseUri(schema, requestArray[1]);
                schema.request.method = requestArray[0].trim();
                schema.request.version = requestArray[2];
            } else if (headerArray[i].indexOf(':') > -1) {
                var a = headerArray[i].split(':');
                var header_name = a[0].trim();
                switch (header_name.toLowerCase()) {
                    case 'cookie':
                        var cookiearray = a[a.length - 1].split(';');
                        var cookies = [];
                        for (var x = 0; x < cookiearray.length; x++) {
                            if (cookiearray[x].indexOf('=') > -1) {
                                var array = cookiearray[x].split('=');
                                var key = array[0].trim();
                                var value = array[array.length - 1].trim();
                                cookies.push({
                                    name: key,
                                    value: value
                                });
                            }
                        }
                        headers.push({ name: header_name, value: a.slice(1).join(':').trim() });
                        schema.request.cookie = cookies;
                        break;
                    case 'host':
                        if (a.length == 3) {
                            schema.uri.port = a[a.length - 1].trim();
                            schema.uri.url = a[a.length - 2].trim()
                        } else if (a.length == 2) {
                            schema.uri.url = a[a.length - 1].trim()
                        }
                        var h = parseInt(schema.uri.port) > 0 ? schema.uri.url + ":" + schema.uri.port : schema.uri.url;
                        headers.push({ name: header_name, value: h });
                        schema.request.host = h;
                        break;
                    default:
                        headers.push({ name: header_name, value: a.slice(1).join(':').trim() });
                        break;
                }
            }
        }

        if (requestObject) {
            schema.request.method = requestObject.request_method;
            schema.uri.protocol = requestObject.request_protocol;
            schema.uri.url = requestObject.request_url;
            schema.uri.port = requestObject.request_port;
        }
        if (requestData.length > 1 && schema.request.method != 'GET' && schema.request.method != 'HEAD') {
            BackgroundProxy.Logger.log(requestData);
            schema.request.body = requestData[1];
        }
        var url = schema.uri.path;
        if (!url || !(/^https?:\/\//).test(url))
            url = schema.uri.protocol + '://' + schema.uri.url + ((schema.uri.port != "80" && schema.uri.port != "443") ? (":" + schema.uri.port) : "") + (schema.uri.path ? schema.uri.path : "");
        if (schema.uri.queryString) url += schema.uri.queryString;
        schema.request.url = url;
        if (headers.length == 0) {
            headers.push({ name: "Host", value: schema.uri.url });
            schema.request.host = schema.uri.url;
        }
        schema.request.headers = headers;
        /* End */
        return schema;
    };

    this.parseAttackResponse = function (responseSchema, xhr) {
        var headerString = xhr.getAllResponseHeaders();
        var headerArray = headerString.split('\r\n');
        var headers = [];
        var content = xhr.responseText;
        BackgroundProxy.Logger.log(xhr);
        for (var i = 0; i < headerArray.length; i++) {
            var a = headerArray[i].split(':');
            if (a[0].trim() !== '') {
                headers.push({
                    name: a[0].trim(),
                    value: a[1].trim()
                });
            }
        }
        responseSchema.headers = headers;
        responseSchema.content = content;
        return responseSchema;
    };

    this.parseUri = function (schema, unparsedUri) {
        if(unparsedUri.toLowerCase().startsWith('http')){
            
        }
        if (unparsedUri.indexOf('?') > 0) {
            schema.uri.path = unparsedUri.substring(0, unparsedUri.indexOf('?'));
            schema.uri.parameters = this.parseQueryString(unparsedUri.substring(unparsedUri.indexOf('?') + 1));
            schema.uri.queryString = unparsedUri.substring(unparsedUri.indexOf('?'));
        } else {
            schema.uri.parameters = [];
            schema.uri.path = unparsedUri;
        }
        return schema;
    };

    this.parseQueryString = function (queryString) {
        if (queryString.indexOf('?') === 0) {
            queryString = queryString.slice(1);
        }
        var parameters = [];
        var queryArray = queryString.split('&');
        for (var index in queryArray) {
            if (queryArray.hasOwnProperty(index)) {
                parameters.push({
                    key: queryArray[index].split('=')[0],
                    value: queryArray[index].split('=')[1]
                });
            }
        }
        return parameters;
    };

    this.schema = function () {
        return {
            request: function () {
                return {
                    headers: [],
                    body: '',
                    cookie: [],
                    uri: this.uri(),
                    method: '',
                    version: '',
                    host: '',
                    url: ''
                }

            },
            response: function () {
                return {
                    headers: 'Waiting for attack response....(click the ' +
                        'Send request button if response is taking a while)',
                    content: ''
                }
            },
            uri: function () {
                return {
                    parameters: [],
                    protocol: 'http',
                    url: '',
                    path: '',
                    queryString: '',
                    port: ''
                }
            }
        }
    };
}; //end Request