/* Author: Denis Podgurskii */
'use strict';
////////////////////////////////////
/* Request */
////////////////////////////////////

function ptkRequest() {
    this.validate = function (message) {
        if (message && message.function == 'validate') {
            browser.windows.create({ url: browser.extension.getURL("browser/requestbuilder.html?validateRequest=" + message.parameters), type: "popup" }).then(
                function (win) {
                    BackgroundProxy.excludeTab(win.tabs[0].id);
                });
        }
    };

    this.parseAttackResponse = function (responseSchema, xhr) {
        var headerString = xhr.getAllResponseHeaders();
        var headerArray = headerString.split('\r\n');
        var headers = [];
        var content = xhr.responseText;
        BackgroundProxy.Logger.log(xhr);
        for (var i = 0; i < headerArray.length; i++) {
            var a = headerArray[i].split(':');
            if (a[0].trim() !== '') {
                headers.push({ name: a[0].trim(), value: a[1].trim() });
            }
        }
        responseSchema.headers = headers;
        responseSchema.content = content;
        return responseSchema;
    };

    this.updateRawRequest = function (requestObject) {

        if (!requestObject.request_url.startsWith(requestObject.request_protocol + "://"))
            requestObject.request_url = requestObject.request_protocol + "://" + requestObject.request_url.replace(/^https?:\/\//, '');

        if (requestObject.request.trim() == "") {
            requestObject.request = requestObject.request_method + " " + requestObject.request_url + " HTTP/1.1";
        } else {
            var requestData = requestObject.request.trim().split(/\r?\n/);
            requestData[0] = requestObject.request_method + " " + requestObject.request_url + " HTTP/1.1";
            requestObject.request = requestData.join('\n');
        }
        var schema = this.parseRawRequest(requestObject);

        return schema;
    };

    //Returns request schema
    this.parseRawRequest = function (requestObject) {
        var schema = this.requestSchema();
        var requestData = requestObject.request.trim().split(/\n\n/);
        var headerArray = requestData[0].split(/\r?\n/);

        var host = null;
        if (headerArray.filter(x => x.includes('Host:')).length != 0) {
            var h = headerArray.filter(x => x.includes('Host:'))[0].split(":");
            h.shift();
            host = h.join(":").trim();
        }

        var requestString = headerArray.shift();
        if (requestString.toUpperCase().match(/(^GET|^POST|^HEAD|^PUT|^DELETE|^OPTIONS)/)) {
            var requestArray = requestString.split(' ');
            if (requestArray[1].startsWith('http')) {
                schema.request.url = new URL(requestArray[1]);
                //Add Host header if doesn't exist
                if (headerArray.filter(x => x.includes('Host:')).length == 0) {
                    headerArray.push('Host: ' + schema.request.url.host);
                } else {
                    headerArray[headerArray.findIndex(x => x.includes('Host:'))] = 'Host: ' + schema.request.url.host;
                }
            } else {
                if (!host)
                    throw 'Host value not defined. Use an absolute URL or add "Host" header.';
                let baseUrl = requestObject.request_protocol + "://" + host;
                schema.request.url = new URL(requestArray[1], baseUrl);
            }
            schema.request.method = requestArray[0].trim();
            schema.request.version = requestArray[2];
        }

        schema.request.headers = headerArray;
        if (requestData.length > 1 && schema.request.method != 'GET' && schema.request.method != 'HEAD') {
            schema.request.body = requestData[1];
        }
        return schema;
    };

    this.requestSchema = function () {
        return {
            request: {
                method: '',
                headers: [],
                cookie: [],
                body: '',
                version: '',
                url: null,
                toString: ''
            },
            response: {
                headers: [],
                content: ''
            },
            toString: function () {
                let r = this.request.method + ' ' + this.request.url + ' ' + this.request.version + '\n' + this.request.headers.join('\n');
                if (this.request.body) r += '\n\n' + this.request.body;
                return r;
            }
        }
    };

}; //end Request