/* Author: Denis Podgurskii */
'use strict';
////////////////////////////////////
// Exporter -- a class to render recorded tests
////////////////////////////////////
function Exporter() {
    this.title = "PenTestKit exporter";
    this.items = null;
    this.history = new Array();
    this.last_events = new Array();
    this.screen_id = 1;
    this.unamed_element_id = 1;
    this.output = '';
    this.useEncryption = true;
    this.eventType = "";
    this.minDuration = 0;
    this.elementPath = "";
    this.debug = false;

    var EventTypes = { OpenUrl: 0, Click: 1, Keypress: 2, Paste: 12, Change: 4, Delay: 25 };

    this.stmt = function (text, indent) {
        if (indent == undefined) indent = 1;
        var output = (new Array(4 * indent)).join(" ") + text;
        this.output += text;
    };

    this.pyrepr = function (text, escape) {
        // todo: handle non--strings & quoting
        // There should a more eloquent way of doing this but by  doing the escaping before adding the string quotes prevents the string quotes from accidentally getting escaped creating a syntax error in the output code.
        var s = text;
        if (escape) s = s.replace(/(['"])/g, "\\$1");
        var s = "'" + s + "'";
        return s;
    };

    var cc = EventTypes;

    this.renderXml = function (items, options) {
        this.output = '';
        this.items = items;
        var etypes = EventTypes;
        this.useEncryption = options['useEncryption'];
        this.minDuration = options['min_duration'];
        this.elementPath = options['element_path'];
        this.eventType = options['event_type'];
        BackgroundProxy.Recorder.iFramesDetected = false;
        this.writeHeader();
        var last_item = null;
        var forget_click = false;
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (i == 0) {
                if (item.type != etypes.OpenUrl) {
                    //this.stmt("ERROR: the recorded sequence does not start with a url openning.");
                    this.output = 'error';
                    return;
                } else {
                    this.dispatch(item.type, item);
                    if (this.items[1] && this.items[1].type != EventTypes.Delay) this.delay(item);
                    continue;
                }
            }

            if (this.debug) console.log(item.type);
            this.dispatch(item.type, item);
            if (this.eventType == "Javascript" && (item.type != EventTypes.Delay && this.items[i + 1] && this.items[i + 1].type != EventTypes.Delay)) {
                this.delay(item);
            }
            last_item = item;
        }
        if (last_item && last_item.type != EventTypes.Delay) this.delay(last_item);
        this.writeFooter();
        return this.output;
    };

    this.normalizeWhitespace = function (s) {
        return s.replace(/^\s*/, '').replace(/\s*$/, '').replace(/\s+/g, ' ');
    };

    this.shortUrl = function (url) {
        return url.substr(url.indexOf('/', 10), 999999999);
    };

    this.getControl = function (item) {
        var type = item.info.type;
        var tag = item.info.tagName.toLowerCase();
        var selector;
        if ((type == "submit" || type == "button") && item.info.value)
            selector = tag + '[type=' + type + '][value=' + this.pyrepr(this.normalizeWhitespace(item.info.value)) + ']';
        else if (item.info.name || item.info.id)
            selector = tag + '[@name="' + this.pyrepr(item.info.name) + '"]';
        else
            selector = item.info.selector;

        return selector;
    };


    this.GUID = function () {
        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16).toUpperCase();
        });
    };

    this.writeHeader = function () {
        this.stmt('<?xml version="1.0"?>\r\n', 0);
        this.stmt("<MacroEventList>\r\n", 0);
    };

    this.writeFooter = function () {

        this.stmt("</MacroEventList>", 0);
    };

    this.eventDuration = function (duration) {
        this.minDuration = parseInt(this.minDuration);
        duration = parseInt(duration);
        if (duration < this.minDuration) duration = this.minDuration + parseInt(duration / 3);
        return duration;
    };

    this.elementPathByType = function (info) {
        if (this.elementPath == "fullpath") return info.fullxpath;
        return info.xpath;
    };

    this.elementCssByType = function (info) {
        if (this.elementPath == "fullpath") return info.fullcssselector;
        return info.cssselector;
    };

    this.dispatch = function (type, item) {
        var event = "", data = "", path = "", xpath = "";
        switch (type) {
            case EventTypes.OpenUrl:
                event = "Navigate", data = item.url;
                break;
            case EventTypes.Delay:
                event = "Delay";
                break;
            case EventTypes.Keypress:
            case EventTypes.Paste:
            case EventTypes.Change:
                data = item.text;
                xpath = item.info.xpath;
                path = this.elementPathByType(item.info);
                if (this.eventType == "DriverClick") event = "DriverSetControlValue";
                else if (this.eventType == "OnClick") event = "SetControlData";
                else if (this.eventType == "Javascript") {
                    data = this.javascriptSetControlValueEvent(item.text, this.elementCssByType(item.info));
                    event = "Javascript";
                    path = "";
                }
                break;
            case EventTypes.Click:
                data = (item.info.value != undefined ? item.info.value : "");
                path = this.elementPathByType(item.info);
                xpath = item.info.xpath;
                if (this.eventType == "DriverClick") event = "DriverClick";
                else if (this.eventType == "OnClick") event = "OnClick";
                else if (this.eventType == "Javascript") {
                    data = this.javascriptClickEvent(data, this.elementCssByType(item.info));
                    event = "Javascript";
                    path = "";
                }
                break;
        }
        if (xpath.startsWith('xpath=//IFRAME')) BackgroundProxy.Recorder.iFramesDetected = true;
        this.template(item, event, data, path);
    };


    this.delay = function (item) {
        this.template(item, 'Delay', '', '');
    };

    this.javascriptGetMacroItem = function (path, attrs) {
        var output = "";
        if (attrs.length > 0 && path == "") {
            if (attrs[0] == 'a') {
                output += `var item = Array.prototype.slice.call(document.querySelectorAll('ptk_ATTRNAME_ptk')).filter(function (el) { return el.textContent === 'ptk_ATTRVALUE_ptk'})[0];
            `.replace(/ptk_ATTRNAME_ptk/g, attrs[0]).replace(/ptk_ATTRVALUE_ptk/g, attrs[1]);;
            } else {
                path = '[' + attrs[0] + ' = "' + attrs[1] + '"]';
                output += `var item = document.querySelector('ptk_PATH_ptk'); `.replace(/ptk_PATH_ptk/g, path);
            }
        } else {
            output += `var item = document.querySelector(path); `

        }
        return output;
    };

    this.javascriptSetControlValueEvent = function (data, path, attrs = []) {
        var output = `(function(path, data){
            ` + this.javascriptGetMacroItem(path, attrs);
        output += `
            let lastValue = item.value;
            var event = new Event('input', {bubbles: true});
            event.simulated = true;
            item.value = data;
            item.defaultValue = data;
            let tracker = item._valueTracker;
            if (tracker) { tracker.setValue(lastValue); }
            item.dispatchEvent(event);
            item.dispatchEvent(new Event('change', {bubbles: true}));
            item.dispatchEvent(new Event('resize', {bubbles: true}));
        })('ptk_PATH_ptk', 'ptk_DATA_ptk');
        `.replace(/ptk_PATH_ptk/g, path).replace(/ptk_DATA_ptk/g, data);
        return output;
    };

    this.javascriptClickEvent = function (data, path, attrs = []) {
        var output = `(function(path){
            ` + this.javascriptGetMacroItem(path, attrs);
        output += `
            item.click();
            item.dispatchEvent(new Event('resize', {bubbles: true}));
        `;
        output += `})('ptk_PATH_ptk');`.replace(/ptk_PATH_ptk/g, path);
        return output;
    };

    this.template = function (item, event, data, path) {
        if (item == null) return;
        this.stmt("<MacroEvent>\r\n");
        // this.stmt("   <DbId>" + this.GUID() + "</DbId>\r\n");
        // this.stmt("   <ParentDbId>00000000000000000000000000000000</ParentDbId>\r\n");
        this.stmt("   <WindowIndex>0</WindowIndex>\r\n");
        this.stmt("   <EventType>" + event + "</EventType>\r\n");
        this.stmt("   <UseEncryptedData>" + ((item && item.info && item.info.type == "password" && this.useEncryption) ? 1 : 0) + "</UseEncryptedData>\r\n");
        this.stmt("   <Data><![CDATA[" + data + "]]></Data>\r\n");
        this.stmt("   <EncryptedData></EncryptedData>\r\n");
        this.stmt("   <ElementPath><![CDATA[" + path + "]]></ElementPath>\r\n");
        this.stmt("   <Duration>" + this.eventDuration(item.eventDuration) + "</Duration>\r\n");
        this.stmt("   <Enable>1</Enable>\r\n");
        this.stmt("   <Optional>0</Optional>\r\n");
        this.stmt("</MacroEvent>\r\n");
    };

    ///////// HAR file export //////////////
    this.renderHar = function (requests) {

        if (requests.length < 1) return;

        var pages = [];
        var entries = [];
        var requestId = 0;
        for (var i = 0; i < requests.length; i++) {
            var obj = requests[i];
            var postData = null;
            var requestHeaders = [];
            var responseHeaders = [];
            var requestHeaderSize = 0;
            var responseHeaderSize = 0;
            if (obj.response && obj.response.requestHeaders) {
                requestHeaders = Object.keys(obj.response.requestHeaders).map(name => ({ name, value: obj.response.requestHeaders[name] })).filter(item => !item.name.startsWith(":"));
                requestHeaderSize = (JSON.stringify(obj.response.requestHeaders)).length; //obj.response.requestHeadersText.length;
            } else if (obj.request && obj.request.headers) {
                requestHeaders = Object.keys(obj.request.headers).map(name => ({ name, value: obj.request.headers[name] }));
                Object.keys(obj.request.headers).map(name => (requestHeaderSize += name.length + obj.request.headers[name].length));
            }
            if (obj.response && obj.response.headers) {
                responseHeaders = Object.keys(obj.response.headers).map(name => ({ name, value: obj.response.headers[name] }));
            }

            if (obj.type == "Document" && requestId != obj.requestId) {
                var page = {
                    "startedDateTime": (new Date(obj.wallTime).toISOString()),
                    "id": obj.requestId,
                    "title": obj.request.url,
                    "pageTimings": {
                        "onContentLoad": -1,
                        "onLoad": -1
                    }
                };
                pages.push(page);
                requestId = obj.requestId;
            }

            var cookies = [];
            if (obj.response.requestHeaders && obj.response.requestHeaders['Cookie']) {
                var cookieObject = {};
                obj.response.requestHeaders['Cookie'].split('; ').reduce(function (result, v, i, a) {
                    var k = v.split('=');
                    cookies.push({ "name": k[0], "value": k[1], "expires": null, "httpOnly": false, "secure": false });
                }, {});
            }

            if (obj.request.postData) {
                postData = {};
                postData.mimeType = obj.request.headers['Content-Type'];
                postData.text = obj.request.postData;
                var postArray = [];
                try {
                    try {
                        postArray = JSON.parse(obj.request.postData);
                    } catch (e) {
                        postArray = JSON.parse('{"' + decodeURI(obj.request.postData).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');
                    }
                    postData.params = Object.keys(postArray).map(name => ({ name, value: postArray[name] }));
                } catch (e) {
                    console.log(e)
                }
            }

            var entry = {
                "startedDateTime": (new Date(obj.wallTime * 1000).toISOString()),
                "time": 204.2114249991181,
                "request": {
                    "method": obj.request.method,
                    "url": obj.request.url,
                    "httpVersion": (obj.response && obj.response.protocol) ? obj.response.protocol.toUpperCase() : "HTTP/1.1",
                    "headers": requestHeaders,
                    "queryString": [],
                    "cookies": cookies,
                    "headersSize": requestHeaderSize,
                    "bodySize": 0
                },
                "response": {
                    "status": (obj.response && obj.response.status) ? obj.response.status : 0,
                    "statusText": (obj.response && obj.response.statusText) ? obj.response.statusText : "",
                    "httpVersion": (obj.response && obj.response.protocol) ? obj.response.protocol.toUpperCase() : "HTTP/1.1",
                    "headers": responseHeaders,
                    "cookies": [],
                    "content": {
                        "size": (obj.responseBody && obj.responseBody.body) ? obj.responseBody.body.length : 0,
                        "mimeType": (obj.response && obj.response.mimeType) ? obj.response.mimeType : "",
                        "compression": 0,
                        "text": (obj.responseBody && obj.responseBody.body) ? obj.responseBody.body : "",
                        "encoding": (obj.responseBody && obj.responseBody.base64Encoded) ? "base64" : ""
                    },
                    "redirectURL": "",
                    "headersSize": (obj.response.headersText ? obj.response.headersText.length : 0),
                    "bodySize": (obj.responseBody && obj.responseBody.body) ? obj.responseBody.body.length : 0
                },
                "cache": {},
                "timings": {
                    "send": -1,
                    "receive": -1,
                    "wait": -1
                },
                "serverIPAddress": (obj.response && obj.response.remoteIPAddress) ? obj.response.remoteIPAddress : "" ,
                "pageref": obj.parentId
            };

            if (postData != null) {
                entry.request.postData = postData;
            }
            entries.push(entry);
        }

        return {
            "log": {
                "version": "1.0",
                "creator": {
                    "name": "PenTestKit",
                    "version": "1.0"
                },
                pages: pages.reverse(),
                entries: entries
            }
        };
    };

    ///////// AppSpider file export //////////////
    this.renderAppSpiderFormat = function (requests) {

        if (requests.length < 1) return [];

        var pages = [];
        var entries = [];
        var requestId = 0;
        for (var i = 0; i < requests.length; i++) {
            var obj = requests[i];
            if (obj.type != 'Document') continue;
            var request = "";
            var response = "";
            if (obj.response && obj.response.requestHeadersText) {
                request = obj.request.method + " " + obj.request.url + " " + obj.response.protocol.toUpperCase() + "\r\n";
                request += Object.keys(obj.response.requestHeaders).map(name =>
                    (name + ": " + obj.response.requestHeaders[name]
                    )).join("\r\n");
            }
            if (obj.response && obj.response.headersText) {
                response = obj.response.headersText.trim();
            }

            if (obj.request.postData) {
                request += "\r\n\r\n" + obj.request.postData;
            }

            if (obj.responseBody && obj.responseBody.body.trim() != "") {
                response += "\r\n\r\n" + (obj.responseBody.base64Encoded ? window.atob(obj.responseBody.body).trim().replace(/(\r\n|\n|\r)/gm, " ") :
                    obj.responseBody.body.trim().replace(/(\r\n|\n|\r)/gm, " "));
            }

            var entry = {
                "request": window.btoa(encodeURIComponent(request)),
                "response": window.btoa(encodeURIComponent(response))
            };

            entries.push(entry);
        }
        return entries;
    };


    this.sideToMacro = function (content) {
        this.output = "";
        this.writeHeader();
        var url = content.url;
        var item = { eventDuration: BackgroundProxy.Recorder.minDuration };
        content.tests.forEach(test => {
            console.log(test)
            test.commands.forEach(cmd => {
                var cssPath = "";
                var data = cmd.value;
                cmd.targets.forEach(target => {
                    if (target[0].startsWith('css'))
                        cssPath = target[0].replace('css=', "");
                })

                switch (cmd.command) {
                    case "open":
                        this.template(item, "Navigate", url, "");
                        this.delay(item);
                        break;
                    case "click":
                        this.template(item, "Javascript", this.javascriptClickEvent("", cssPath), "");
                        this.delay(item);
                        break;
                    case "type":
                        this.template(item, "Javascript", this.javascriptSetControlValueEvent(data, cssPath), "");
                        this.delay(item);
                        break;
                }
            });
        });
        this.writeFooter();
        return this.output;
    };

    this.seleniumHtmlToMacro = function (content) {
        this.output = "";
        this.writeHeader();
        var parser = new DOMParser();
        var htmlDoc = parser.parseFromString(content, 'text/html');
        var rows = htmlDoc.getElementsByTagName('table')[0].rows;
        var item = { eventDuration: BackgroundProxy.Recorder.minDuration };
        for (var i = 0; i < rows.length; i++) {
            var command = rows[i].cells[0].innerText;
            var xpath = rows[i].cells[1] ? rows[i].cells[1].innerText : "";
            var data = rows[i].cells[2] ? rows[i].cells[2].innerText : "";
            var cssPath = "", attrs = [];
            if (xpath) {
                xpath = xpath.replace(/\'/g, "\"");
                // if (xpath.startsWith('id')) {
                //     cssPath = xpath.replace('id=', '#');
                // }
                if (xpath.startsWith('css')) {
                    cssPath = xpath.replace('css=', '');
                }
                else if (xpath.startsWith('//')) {
                    cssPath = xpath
                        //.replace(/\[(\d+?)\]/g, function (s, m1) { return '[' + (m1 - 1) + ']'; })
                        .replace(/\/{2}/g, '')
                        .replace(/\/+/g, ' > ')
                        .replace(/@/g, '')
                        .replace(/\[(\d+)\]/g, ':nth-of-type($1)')
                        .replace(/^\s+/, '');
                }
                else {
                    attrs = xpath.split('=');
                    if (attrs[0] == 'link') {
                        attrs[0] = 'a';
                    }
                }
            }
            switch (command) {
                case "open":
                    this.template(item, "Navigate", xpath, "");
                    this.delay(item);
                    break;
                case "click":
                    this.template(item, "Javascript", this.javascriptClickEvent("", cssPath, attrs), "");
                    this.delay(item);
                    break;
                case "sendKeys":
                    this.template(item, "Javascript", this.javascriptSetControlValueEvent(data, cssPath, attrs), "");
                    this.delay(item);
                    break;
            }
        }
        this.writeFooter();
        return this.output;
    };


};//End Exporter