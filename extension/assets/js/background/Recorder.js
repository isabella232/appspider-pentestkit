/* Author: Denis Podgurskii */
'use strict';
////////////////////////////////////
/* Recorder */
////////////////////////////////////

function Recorder() {
    this.replay_step = 0;
    this.replayEvents = [];
    this.mode = null; // recording || replay
    this.validateRegex = null;
    this.recorderJS = "assets/js/content/recorder.js";
    this.recorderMainJS = "assets/js/content/recorderMain.js"; // only for top frame
    this.recorderPolyfillJS = "assets/js/lib/browser-polyfill.js";
    this.tabId = null;
    this.openerTabId = null;
    this.items = [];
    this.startUrl = null;
    this.minDuration = 3000;
    this.elementPath = "id"; // fullpath
    this.eventType = "DriverClick"; // OnClick, Javascript
    this.enableRegex = false;
    this.playbackRegex = "";
    this.iFramesDetected = false;
    //traffic recording
    this.requests = [];
    this.captureNetwork = false;
    this.cleanCookie = false;
    this.recordingRequests = [];
    //bootstrap
    this.bootstrapJobID = null;
    this.bootstrapEndpoint = null;
    this.bootstrapPutParams = null;
    this.bootstrapUsePut = false;

    this.savedMacro = "";


    this.start = function (data) {
        if (this.mode == null) {

            this.items = [];
            this.requests = [];
            this.recordingRequests = [];
            this.startUrl = data.start_url
            this.mode = 'recording';

            var domain = (new URL(this.startUrl)).hostname;
            if (this.cleanCookie) {
                browser.cookies.getAll({ domain: domain }).then(function (cookies) {
                    var url = new URL(BackgroundProxy.Recorder.startUrl);
                    for (var i = 0; i < cookies.length; i++) {
                        browser.cookies.remove({
                            url: url.protocol + "//" + cookies[i].domain + cookies[i].path,
                            name: cookies[i].name
                        });
                    }
                });
            }

            browser.storage.local.set({ "pentestkit_recording": { mode: "recording", items: new Array(), startUrl: BackgroundProxy.Recorder.startUrl } }).then(function () {
                browser.windows.create({ url: 'about:blank', type: "popup", incognito: data.incognito }).then(
                    function (win) {
                        BackgroundProxy.Recorder.tabId = win.tabs[0].id;
                        if (BackgroundProxy.Recorder.captureNetwork) {
                            if (!BackgroundProxy.isFirefox) {
                                //Attach debugger
                                var version = "1.3";
                                var debugTarget = { tabId: BackgroundProxy.Recorder.tabId };
                                chrome.debugger.attach(debugTarget, version,
                                    BackgroundProxy.Recorder.onAttach(null, BackgroundProxy.Recorder.tabId)
                                );
                                chrome.debugger.sendCommand(debugTarget, "Network.setCacheDisabled", { cacheDisabled: true });
                                chrome.debugger.sendCommand(debugTarget, "Network.enable");
                            }
                        }
                        browser.windows.update(win.id, { "focused": true });
                        browser.tabs.update(BackgroundProxy.Recorder.tabId, { url: BackgroundProxy.Recorder.startUrl });
                    });
            });

        } else {
            BackgroundProxy.Notifications.notify("Recording/playback already started", "Stop recording before start a new one");
        }
    };

    this.startMacro = function (data) {
        this.captureNetwork = true;
        this.start(data);
    };

    this.startTraffic = function (data) {
        this.captureNetwork = true;
        this.start(data);
    };

    this.startBootstrap = function (data) {
        this.cleanCookie = true;
        this.captureNetwork = true;
        this.bootstrapJobID = data.jobID;
        this.bootstrapEndpoint = data.restAPI;
        this.bootstrapPutParams = data.putParams ? data.putParams : null;
        this.bootstrapUsePut = data.usePut ? data.usePut : false;
        this.start(data);
    };

    this.reset = function () {
        this.stop();
        this.items = [];
        this.requests = [];
        this.recordingRequests = [];
        this.replayEvents = [];
        this.validateRegex = null;

        this.cleanCookie = false;
        this.startUrl = null;

        this.replay_step = 0;
        this.mode = null;
        this.captureNetwork = false;
        this.openerTabId = null;

        this.bootstrapJobID = null;
        this.bootstrapEndpoint = null;
        this.bootstrapPutParams = null;
        this.bootstrapUsePut = false;

        this.minDuration = 3000;
        this.elementPath = "id";
        this.eventType = "DriverClick";
        this.enableRegex = false;
        this.playbackRegex = "";
        this.iFramesDetected = false;

        this.savedMacro = "";
    };

    this.stop = function (removeInfo) {

        if (this.cleanCookie && this.startUrl != null) {
            var domain = (new URL(this.startUrl)).hostname;
            browser.cookies.getAll({ domain: domain }).then(function (cookies) {
                if (BackgroundProxy.Recorder.startUrl) {
                    var url = new URL(BackgroundProxy.Recorder.startUrl);
                    for (var i = 0; i < cookies.length; i++) {
                        browser.cookies.remove({
                            url: url.protocol + "//" + cookies[i].domain + cookies[i].path,
                            name: cookies[i].name
                        });
                    }
                }
                BackgroundProxy.Recorder.cleanCookie = false;
                BackgroundProxy.Recorder.startUrl = null;
            });
        }


        if (BackgroundProxy.Recorder.tabId != null) {
            if (removeInfo == null)
                browser.tabs.get(BackgroundProxy.Recorder.tabId).then(function (tab) {
                    if (tab && tab.id) {
                        console.log({ tabId: tab.id });
                        if (removeInfo == null)
                            browser.tabs.remove(tab.id);
                    }
                });
        }


        browser.storage.local.get('pentestkit_recording').then(function (result) {
            if (result.pentestkit_recording && result.pentestkit_recording.mode == 'recording') {
                BackgroundProxy.Recorder.items = result.pentestkit_recording.items;
                browser.runtime.sendMessage({
                    channel: "ptkBackgroundToPopup",
                    type: "recording completed"
                }).catch(e => e);;
            }
            browser.storage.local.remove('pentestkit_recording');
        });

        this.replayEvents = [];
        this.validateRegex = null;
        this.tabId = null;
        this.replay_step = 0;
        this.mode = null;
        this.captureNetwork = false;
    };

    this.replay = function (data) {
        if (this.mode == null) {
            this.replayEvents = data.events;
            this.mode = 'replay';
            this.replay_step = 1;
            this.validateRegex = data.validateRegex;

            browser.storage.local.set({
                "pentestkit_recording": {
                    mode: "replay",
                    replayItems: data.events,
                    replayStep: 0,
                    validateRegex: data.validateRegex
                }
            }).then(function () {
                browser.windows.create({ url: data.url, type: "popup" }).then(
                    function (win) {
                        BackgroundProxy.Recorder.tabId = win.tabs[0].id;
                        browser.windows.update(win.id, { "focused": true });
                    });
            });
        } else {
            BackgroundProxy.Notifications.notify("Recording/playback already started", "Stop playback/recording before start a new one");
        }
    };

    this.onAttach = function (tabId) {
        if (browser.runtime.lastError) {
            console.log(browser.runtime.lastError.message);
            return;
        }

        if (!BackgroundProxy.isFirefox) {
            chrome.debugger.onEvent.addListener(BackgroundProxy.Recorder.onEvent);
            chrome.debugger.onDetach.addListener(BackgroundProxy.Recorder.onDetach);
        }

    };

    this.onDetach = function (source, reason) {
        console.log(source);
        console.log(reason);

        if (!BackgroundProxy.isFirefox) {
            chrome.debugger.onEvent.removeListener(BackgroundProxy.Recorder.onEvent);
            chrome.debugger.onDetach.removeListener(BackgroundProxy.Recorder.onDetach);
        }
    };

    this.onEvent = function (debuggeeId, message, params) {

        if (BackgroundProxy.Recorder.tabId != debuggeeId.tabId || !BackgroundProxy.Recorder.captureNetwork)
            return;
        if (params.request && params.request.url && params.request.url.includes("-extension://"))
            return;
        if (params.response && params.response.url && params.response.url.includes("-extension://"))
            return;

        var item = {
            requestId: params.requestId,
            parentId: params.loaderId,
            type: params.type,
            params: params,
            response: [],
            responseBody: { body: "", base64Encoded: false }
        };
        var parentIndex = BackgroundProxy.Recorder.requests.findIndex(i => i.requestId === item.parentId);
        var reverseIndex = BackgroundProxy.Recorder.requests.slice().reverse().findIndex(i => i.requestId === item.requestId);
        var count = BackgroundProxy.Recorder.requests.length - 1;
        reverseIndex = reverseIndex >= 0 ? count - reverseIndex : reverseIndex;
        var index = Object.keys(BackgroundProxy.Recorder.recordingRequests)[reverseIndex];

        if (message == "Network.requestWillBeSent") {
            if (params.type != "Document" && parentIndex < 0) return;
            if (params.redirectResponse ||
                BackgroundProxy.Recorder.recordingRequests.length > BackgroundProxy.Recorder.requests.length ||
                BackgroundProxy.Recorder.recordingRequests.length == 0 ||
                (BackgroundProxy.Recorder.recordingRequests.length == BackgroundProxy.Recorder.requests.length && params.type === "Document"))
                BackgroundProxy.Recorder.requests.push(item);
        }
        else if (message == "Network.responseReceived" && reverseIndex >= 0) {
            if (index > -1) BackgroundProxy.Recorder.recordingRequests[index].response = params.response;
        } else
            if (message == "Network.loadingFinished") {
                try {
                    chrome.debugger.sendCommand({ tabId: BackgroundProxy.Recorder.tabId }, "Network.getResponseBody", { "requestId": params.requestId },
                        function (response) {
                            if (index > -1) BackgroundProxy.Recorder.recordingRequests[index].responseBody = response;

                        });
                } catch (e) {
                    console.log(e)
                }
            }
    };

    ///////// Analyze recorded traffic //////////////
    this.analyze = function () {
        console.log(this.recordingRequests);
        var result = [];
        try {
            var previousValue = [];
            for (var i = 0; i < this.recordingRequests.length; i++) {

                var requestHeaders = [], responseHeaders = [];

                var obj = this.recordingRequests[i],
                    type = obj.type.toLowerCase(),
                    url = obj.request.urlFragment ? obj.request.url + obj.request.urlFragment : obj.request.url;

                var a = document.createElement('a');
                a.href = url;
                var hostname = a.hostname;
                if (!previousValue[hostname]) previousValue[hostname] = {};


                if (obj.response && obj.response.requestHeaders) {
                    requestHeaders = Object.keys(obj.response.requestHeaders).map(name => ({ name, value: obj.response.requestHeaders[name] }));
                } else if (obj.requestHeaders) {
                    requestHeaders = requestHeaders;
                }

                var resultObj = { hostname: hostname };
                requestHeaders.find(function (item) {
                    if (item.name.toLowerCase() == 'cookie' && previousValue[hostname].cookie != item.value) {
                        resultObj.browser = { cookie: { item: {} } };
                        resultObj.browser.cookie = { item: item, request: obj };
                        previousValue[hostname].cookie = item.value;
                    }
                    if (item.name.toLowerCase() == 'authorization' && previousValue[hostname].authorization != item.value) {
                        resultObj.browser = { authorization: { item: {} } };
                        resultObj.browser.authorization = { item: item, request: obj };
                        previousValue[hostname].authorization = item.value;
                    }
                });

                if (obj.responseHeaders && obj.responseHeaders.length > 0)
                    responseHeaders = obj.responseHeaders;
                else if (obj.response && obj.response.headers)
                    responseHeaders = Object.keys(obj.response.headers).map(name => ({ name, value: obj.response.headers[name] }));
                else if (obj.request && obj.request.responseHeaders)
                    responseHeaders = obj.request.responseHeaders;
                responseHeaders.find(function (item) {
                    if (item.name.toLowerCase() == 'set-cookie') {
                        resultObj.server = { cookie: { item: {} } };
                        resultObj.server.cookie = { item: item, request: obj };
                    }
                });

                if (obj.responseBody && obj.responseBody.body) {
                    var body = obj.responseBody.base64Encoded ? atob(obj.responseBody.body) : obj.responseBody.body,
                        token = body.match(new RegExp('(?:"[^"]*token"\s?:\s?){1}"([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)"{1}'));
                    if (token) {
                        resultObj.server = { token: { item: {} } };
                        resultObj.server.token = { item: token[token.length - 1], request: obj };
                    }
                }
                if (resultObj.browser || resultObj.server) {
                    result[i] = resultObj;
                }
            }
        } catch (e) {
            console.log(e)
            BackgroundProxy.Logger.log("Traffic analysis", e);
        }
        return result;
    };
};//end Recorder