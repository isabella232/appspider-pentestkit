/* Author: Denis Podgurskii */
'use strict';

function Recorder() {
    this.replay_step = 0;
    this.replayEvents = [];
    this.mode = null; // recording || replay
    this.validateRegex = null;
    this.recorderJS = "assets/js/recorder/recorder.js";
    this.tabId = null;
    this.items = [];
    this.startUrl = null;
    this.useFullPath = false;
    this.minDuration = 4000;
    this.elementPath = "id"; // fullpath/javascript
    //traffic recording
    this.requests = [];
    this.captureNetwork = true;
    this.cleanCookie = false;
}

Recorder.prototype.start = function (data) {
    if (this.mode == null) {

        this.items = [];
        this.requests = [];
        this.startUrl = data.start_url
        this.mode = 'recording';

        var domain = (new URL(this.startUrl)).hostname;
        if (this.cleanCookie) {
            chrome.cookies.getAll({ domain: domain }, function (cookies) {
                var url = new URL(BackgroundProxy.Recorder.startUrl);
                for (var i = 0; i < cookies.length; i++) {
                    chrome.cookies.remove({
                        url: url.protocol + "//" + cookies[i].domain + cookies[i].path,
                        name: cookies[i].name
                    });
                }
            });
        }
        setTimeout(function () {
            chrome.windows.create({ url: BackgroundProxy.Recorder.startUrl, type: "popup" },
                function (win) {
                    BackgroundProxy.Recorder.tabId = win.tabs[0].id;

                    //Attach debugger
                    var version = "1.3";
                    var debugTarget = { tabId: BackgroundProxy.Recorder.tabId };
                    chrome.debugger.attach(debugTarget, version,
                        BackgroundProxy.Recorder.onAttach(null, BackgroundProxy.Recorder.tabId)
                    );
                    chrome.debugger.sendCommand(debugTarget, "Network.setCacheDisabled", { cacheDisabled: true });
                    chrome.debugger.sendCommand(debugTarget, "Network.enable");

                    alert("You are now recording a macro/traffic sequence.");
                    chrome.windows.update(win.id, { "focused": true });
                });
        }, 100);
    } else {
        alert("Stop recording before start a new one.");
    }
}

Recorder.prototype.append = function (data) {
    this.items = data.items;
}

Recorder.prototype.reset = function () {
    this.items = [];
    this.requests = [];
    this.replayEvents = [];
    this.validateRegex = null;

    this.cleanCookie = false;
    this.startUrl = null;

    this.replay_step = 0;
    this.mode = null;
    this.captureNetwork = false;
}

Recorder.prototype.stop = function (removeInfo) {

    if (this.cleanCookie && this.startUrl != null) {
        var domain = (new URL(this.startUrl)).hostname;
        chrome.cookies.getAll({ domain: domain }, function (cookies) {
            var url = new URL(BackgroundProxy.Recorder.startUrl);
            for (var i = 0; i < cookies.length; i++) {
                chrome.cookies.remove({
                    url: url.protocol + "//" + cookies[i].domain + cookies[i].path,
                    name: cookies[i].name
                });
            }
            BackgroundProxy.Recorder.cleanCookie = false;
            BackgroundProxy.Recorder.startUrl = null;
        });
    }

    if (removeInfo == null) {
        chrome.tabs.get(BackgroundProxy.Recorder.tabId, function (tab) {
            chrome.tabs.remove(tab.id);
        });
    }

    this.replayEvents = [];
    this.validateRegex = null;
    this.tabId = null;
    this.replay_step = 0;
    this.mode = null;
    this.captureNetwork = false;
}

Recorder.prototype.updateTab = function (data) {

    var recorder = BackgroundProxy.Recorder;
    switch (recorder.mode) {

        case 'replay':
            var event = recorder.replayEvents[recorder.replay_step];
            if (recorder.replay_step > recorder.replayEvents.length) return;

            if (event) {
                setTimeout(BackgroundProxy.Recorder.updateTab, event.Duration, event);
                chrome.tabs.sendMessage(BackgroundProxy.Recorder.tabId, {
                    channel: 'ptkBackgroundToRecorder',
                    action: "replay",
                    event: event
                });
            } else {
                if (recorder.validateRegex != null) {
                    chrome.tabs.sendMessage(BackgroundProxy.Recorder.tabId, {
                        channel: 'ptkBackgroundToRecorder',
                        action: "validateRegex",
                        regex: recorder.validateRegex
                    });
                }
                setTimeout(BackgroundProxy.Recorder.stop, 3500, null);
            }

            recorder.replay_step++;
            break;

        case 'recording':
            if (recorder.items.length > 0) {
                chrome.tabs.sendMessage(recorder.tabId, {
                    channel: 'ptkBackgroundToRecorder',
                    action: "initRecorder",
                    items: recorder.items
                });
            } else if (recorder.startUrl != null) {
                recorder.captureNetwork = true;
                chrome.tabs.sendMessage(recorder.tabId, {
                    channel: 'ptkBackgroundToRecorder',
                    action: "openRecorderURL",
                    url: recorder.startUrl
                });
            }
            break;

        default:
            break;
    }
}

Recorder.prototype.replay = function (data) {
    if (this.mode == null) {
        this.replayEvents = data.events;
        this.mode = 'replay';
        this.replay_step = 1;
        this.validateRegex = data.validateRegex;

        setTimeout(function () {
            chrome.windows.create({ url: data.url, type: "popup" },
                function (win) {
                    BackgroundProxy.Recorder.tabId = win.tabs[0].id;
                    alert("You are now replaying a macro sequence.");
                    chrome.windows.update(win.id, { "focused": true });
                });
        }, 100);
    } else {
        alert("Stop replaying or recording before start a new one.");
    }
}

Recorder.prototype.onAttach = function (tabId) {
    if (chrome.runtime.lastError) {
        alert(chrome.runtime.lastError.message);
        return;
    }
    chrome.debugger.onEvent.addListener(BackgroundProxy.Recorder.onEvent);
    chrome.debugger.onDetach.addListener(BackgroundProxy.Recorder.onDetach);
}

Recorder.prototype.onDetach = function () {
    //chrome.debugger.sendCommand({tabId: BackgroundProxy._previousTab.tabId}, "Network.setCacheDisabled", { cacheDisabled: false });
    chrome.debugger.onEvent.removeListener(BackgroundProxy.Recorder.onEvent);
    chrome.debugger.onDetach.removeListener(BackgroundProxy.Recorder.onDetach);
}

Recorder.prototype.onEvent = function (debuggeeId, message, params) {

    if (BackgroundProxy.Recorder.tabId != debuggeeId.tabId || !BackgroundProxy.Recorder.captureNetwork)
        return;
    if (params.request && params.request.url && params.request.url.startsWith("chrome-extension://"))
        return;
    if (params.response && params.response.url && params.response.url.startsWith("chrome-extension://"))
        return;

    var item = {
        requestId: params.requestId,
        parentId: params.loaderId,
        wallTime: params.wallTime,
        type: params.type,
        request: [],
        response: [],
        responseBody: { body: "", base64Encoded: false }
    };
    var index = BackgroundProxy.Recorder.requests.findIndex(i => i.requestId === item.requestId);
    var parentIndex = BackgroundProxy.Recorder.requests.findIndex(i => i.requestId === item.parentId);

    var reverseIndex = BackgroundProxy.Recorder.requests.slice().reverse().findIndex(i => i.requestId === item.requestId);
    var count = BackgroundProxy.Recorder.requests.length - 1;
    reverseIndex = reverseIndex >= 0 ? count - reverseIndex : reverseIndex;

    if (message == "Network.requestWillBeSent") {
        if (item.type != "Document" && parentIndex < 0) return;

        item.request = params.request;
        if (params.redirectResponse && index > 0) {
            BackgroundProxy.Recorder.requests[index].response = params.redirectResponse;
        }
        BackgroundProxy.Recorder.requests.push(item);

    } else if (message == "Network.responseReceived") {
        if (reverseIndex >= 0) {
            BackgroundProxy.Recorder.requests[reverseIndex].response = params.response;
            try {
                chrome.debugger.sendCommand({
                    tabId: BackgroundProxy.Recorder.tabId
                }, "Network.getResponseBody", {
                        "requestId": params.requestId
                    }, function (response) {
                        BackgroundProxy.Recorder.requests[reverseIndex].responseBody = response;
                    });
            } catch (e) { }
        }
    }
}

chrome.runtime.onMessage.addListener(
    function (message, sender, sendResponse) {
        if (message && message.channel == 'ptkRecorderToBackground' && message.function == 'append') {
            BackgroundProxy.Recorder.append(message.data);
        }
    });
