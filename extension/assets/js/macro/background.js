/* Author: Denis Podgurskii */
'use strict';

function MacroRecorder() {
    this.active = false;
    this.injectJS = "assets/js/macro/recorder.js";
    this.exportJS = "assets/js/macro/export.js";
    this.tabId = null;
    this.openerTabId = null;
    this.senderTabId = null;
    this.items = {};
    this.action = null;
    this.startUrl = null;
    this.useFullPath = false;
    this.minDuration = 4000;
    this.elementPath = "id"; // fullpath/javascript
}

MacroRecorder.prototype.process = function(data) {
    this.action = null;
    this.senderTabId = data.senderTabId;
    switch (data.function) {
        case 'start':
            if (!this.active) {

                var url = data.start_url;

                /* Get data from the storage sync */
                this.items = {};
                this.active = true;
                this.startUrl = url;
                this.openerTabId = data.senderTabId;

                var domain = (new URL(url)).hostname;
                chrome.cookies.getAll({ domain: domain }, function(cookies) {
                    var domain = (new URL(url)).hostname;
                    for (var i = 0; i < cookies.length; i++) {
                        chrome.cookies.remove({ url: url + cookies[i].path, name: cookies[i].name });
                    }
                });
                setTimeout(function() {
                    chrome.windows.create({ url: data.start_url, type: "popup" },
                        function(win) {
                            //this.tabId = win.tabs[0].id;
                            BackgroundProxy.MacroRecorder.tabId = win.tabs[0].id;
                            BackgroundProxy.MacroRecorder.action = { action: "open", 'url': url };
                            alert("You are now recording your macro sequence.");
                        });
                }, 100);
            } else {
                alert("Stop recording before start a new one.");
            }
            break;
        case 'stop':
            this.active = false;
            this.tabId = null;
            break;
        case 'export':
            if (this.tabId != null) {
                chrome.tabs.remove(this.tabId);
            }
            this.active = false;
            this.tabId = null;
            break;
        case 'reset':
            this.items = new Array();
            break;
        case 'append':
            this.items = data.items;
            break;
        default:
            break;

    }
}