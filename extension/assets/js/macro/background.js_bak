var RecorderProxy = {
    active: false,
    messageType: 'AppSpiderMessage',
    channelName: 'AppSpiderMacro',
    injectJS: "assets/js/macro/recorder.js",
    exportJS: "assets/js/macro/export.js",
    tabId: null,
    openerTabId: null,
    senderTabId: null,
    items: new Array(),
    action: null,
    startUrl: null,
    useFullPath: false,

    process: {
        message: {
            onConnect: function (data) {
                RecorderProxy.action = null;
                RecorderProxy.senderTabId = data.senderTabId;
                switch (data.function) {
                    case 'start':
                        if (!RecorderProxy.active) {
                            chrome.storage.sync.get('full_path', function(result) {
                                var url = data.start_url;

                                /* Get data from the storage sync */
                                RecorderProxy.items = new Array();
                                RecorderProxy.active = true;
                                RecorderProxy.startUrl = url;
                                RecorderProxy.openerTabId = data.senderTabId;

                                if(typeof result.full_path !== "undefined") {
                                    RecorderProxy.useFullPath = result.full_path;
                                } else {
                                    RecorderProxy.useFullPath = false;
                                }
                                // RecorderProxy.useFullPath = data.useFullPath;

                                var domain = (new URL(url)).hostname;
                                chrome.cookies.getAll({ domain: domain }, function (cookies) {
                                    var domain = (new URL(url)).hostname;
                                    for (var i = 0; i < cookies.length; i++) {
                                        chrome.cookies.remove({ url: url + cookies[i].path, name: cookies[i].name });
                                    }
                                });
                                setTimeout(function () {
                                    chrome.windows.create({ url: data.start_url, type: "popup" },
                                        function (win) {
                                            RecorderProxy.tabId = win.tabs[0].id;
                                            RecorderProxy.action = { action: "open", 'url': url };
                                            alert("You are now recording your test sequence.");
                                        });
                                }, 100);

                                if (data.loadExportJS)
                                    chrome.tabs.executeScript(RecorderProxy.openerTabId, { file: RecorderProxy.exportJS });
                            });
                        }
                        else {
                            alert("Stop recording before start new one.");
                        }
                        break;
                    case 'stop':
                        if (RecorderProxy.tabId != null) chrome.tabs.remove(RecorderProxy.tabId);
                        RecorderProxy.active = false;
                        RecorderProxy.tabId = null;
                        break;
                    case 'reset':
                        RecorderProxy.items = new Array();
                        break;
                    case 'append':
                        RecorderProxy.items = data.items;
                        break;
                    case 'export':
                        break;

                }
            }
        }
    }
}


chrome.tabs.onUpdated.addListener(function (tabId, info, tab) {
    if (info.status != "complete") return;
    setTimeout(function () {
        if (RecorderProxy.active && RecorderProxy.tabId != null && tab.id == RecorderProxy.tabId) {
            chrome.tabs.executeScript(RecorderProxy.tabId, { file: RecorderProxy.injectJS, allFrames: true }, function (result) {
                if (RecorderProxy.action != null) {
					console.log('openMacroURL');
                    chrome.tabs.sendMessage(RecorderProxy.tabId, { action: "openMacroURL", 'url': RecorderProxy.startUrl });
                    RecorderProxy.action = null;
                }
                if (RecorderProxy.tabId != null){
                    console.log('initMacroRecorder');
                    console.log(RecorderProxy.items);
                    chrome.tabs.sendMessage(RecorderProxy.tabId, { action: 'initMacroRecorder', items: RecorderProxy.items, useFullPath: RecorderProxy.useFullPath });
                }
            });
        }
    }, 100);
});

chrome.tabs.onRemoved.addListener(function (tabId, removeInfo) {
    if (tabId == RecorderProxy.tabId) {
        RecorderProxy.tabId = null;
        RecorderProxy.process.message.onConnect({ function: 'stop' });
    }
});