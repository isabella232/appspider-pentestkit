'use strict';
// ---------------------------------------------------------------------------
// AppSpiderRenderer -- a class to render recorded tests
// ---------------------------------------------------------------------------

var EventTypes = {};

EventTypes.OpenUrl = 0;
EventTypes.Click = 1;
EventTypes.Keypress = 2;


function AppSpiderRenderer() {
	this.title = "Rapid7 AppSec Plugin Macro";
	this.items = null;
	this.history = new Array();
	this.last_events = new Array();
	this.screen_id = 1;
	this.unamed_element_id = 1;
	this.output = '';
	this.useEncryption = true;
}

AppSpiderRenderer.prototype.stmt = function (text, indent) {
	if (indent == undefined) indent = 1;
	var output = (new Array(4 * indent)).join(" ") + text;
	this.output += text;
}

AppSpiderRenderer.prototype.pyrepr = function (text, escape) {
	// todo: handle non--strings & quoting
	// There should a more eloquent way of doing this but by  doing the escaping before adding the string quotes prevents the string quotes from accidentally getting escaped creating a syntax error in the output code.
	var s = text;
	if (escape) s = s.replace(/(['"])/g, "\\$1");
	var s = "'" + s + "'";
	return s;
}

var d = {};
d[EventTypes.OpenUrl] = "openUrl";
d[EventTypes.Click] = "click";
d[EventTypes.Keypress] = "keypress";

AppSpiderRenderer.prototype.dispatch = d;

var cc = EventTypes;

AppSpiderRenderer.prototype.renderXml = function (items, useEncryption=true) {
	this.output = '';
	this.items = items;
	var etypes = EventTypes;
	this.useEncryption = useEncryption;
	this.writeHeader();
	var last_down = null;
	var forget_click = false;
	var lastItem = null;
	for (var i = 0; i < this.items.length; i++) {
		var item = this.items[i];
		lastItem = item;
		if (i == 0) {
			if (item.type != etypes.OpenUrl) {
				//this.stmt("ERROR: the recorded sequence does not start with a url openning.");
				this.output = 'error';
				return;
			} else {
				this.startUrl(item);
				this.delay(item);
				continue;
			}
		}

		console.log(item.type);
		if (this.dispatch[item.type]) {
			this[this.dispatch[item.type]](item);
		}
	}
	if (lastItem != null) this.delay(lastItem);
	this.writeFooter();
	return this.output;
}

AppSpiderRenderer.prototype.formatXml = function (xml) {
	var formatted = '';
	var reg = /(>)(<)(\/*)/g;
	xml = xml.replace(reg, '$1\r\n$2$3');
	var pad = 0;
	jQuery.each(xml.split('\r\n'), function(index, node) {
		var indent = 0;
		if (node.match( /.+<\/\w[^>]*>$/ )) {
			indent = 0;
		} else if (node.match( /^<\/\w/ )) {
			if (pad != 0) {
				pad -= 1;
			}
		} else if (node.match( /^<\w([^>]*[^\/])?>.*$/ )) {
			indent = 1;
		} else {
			indent = 0;
		}

		var padding = '';
		for (var i = 0; i < pad; i++) {
			padding += '  ';
		}

		formatted += padding + node + '\r\n';
		pad += indent;
	});

	return formatted;
}

AppSpiderRenderer.prototype.normalizeWhitespace = function (s) {
	return s.replace(/^\s*/, '').replace(/\s*$/, '').replace(/\s+/g, ' ');
}

AppSpiderRenderer.prototype.shortUrl = function (url) {
	return url.substr(url.indexOf('/', 10), 999999999);
}

AppSpiderRenderer.prototype.getControl = function (item) {
	var type = item.info.type;
	var tag = item.info.tagName.toLowerCase();
	var selector;
	if ((type == "submit" || type == "button") && item.info.value)
		selector = tag + '[type=' + type + '][value=' + this.pyrepr(this.normalizeWhitespace(item.info.value)) + ']';
	else if (item.info.name || item.info.id)
		selector = tag + '[@name="' + this.pyrepr(item.info.name) + '"]';
	else
		selector = item.info.selector;

	return selector;
}

AppSpiderRenderer.prototype.getLinkXPath = function (item) {
	var way;
	if (item.text)
		way = 'normalize-space(text())=' + this.cleanStringForXpath(this.normalizeWhitespace(item.text), true);
	else if (item.info.id)
		way = '@id=' + this.pyrepr(item.info.id);
	else if (item.info.href)
		way = '@href=' + this.pyrepr(this.shortUrl(item.info.href));
	else if (item.info.title)
		way = 'title=' + this.pyrepr(this.normalizeWhitespace(item.info.title));

	return way;
}

AppSpiderRenderer.prototype.GUID = function () {
	return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
		var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
		return v.toString(16).toUpperCase();
	});
}

AppSpiderRenderer.prototype.writeHeader = function () {
	this.stmt('<?xml version="1.0"?>\r\n', 0);
	this.stmt("<MacroEventList>\r\n", 0);
}
AppSpiderRenderer.prototype.writeFooter = function () {
	this.stmt("</MacroEventList>", 0);
}

AppSpiderRenderer.prototype.startUrl = function (item) {
	this.stmt("<MacroEvent>\r\n");
	this.stmt("   <DbId>" + this.GUID() + "</DbId>\r\n");
	this.stmt("   <ParentDbId>00000000000000000000000000000000</ParentDbId>\r\n");
	this.stmt("   <WindowIndex>0</WindowIndex>\r\n");
	this.stmt("   <EventType>Navigate</EventType>\r\n");
	this.stmt("   <UseEncryptedData>0</UseEncryptedData>\r\n");
	this.stmt("   <Data><![CDATA[" + item.url + "]]></Data>\r\n");
	this.stmt("   <EncryptedData></EncryptedData>\r\n");
	this.stmt("   <ElementPath><![CDATA[]]></ElementPath>\r\n");
	this.stmt("   <Duration>" + (parseInt(item.eventDuration) + Math.floor((Math.random() * 111) + 1) ) + "</Duration>\r\n");
	this.stmt("   <Enable>1</Enable>\r\n");
	this.stmt("   <Optional>0</Optional>\r\n");
	this.stmt("</MacroEvent>\r\n");
}

AppSpiderRenderer.prototype.keypress = function (item) {
	var text = item.text;//.replace('\r\n', '\\r');
	this.stmt("<MacroEvent>\r\n");
	this.stmt("   <DbId>" + this.GUID() + "</DbId>\r\n");
	this.stmt("   <ParentDbId>00000000000000000000000000000000</ParentDbId>\r\n");
	this.stmt("   <WindowIndex>0</WindowIndex>\r\n");
	this.stmt("   <EventType>SetControlData</EventType>\r\n");
	this.stmt("   <UseEncryptedData>" + ((item.info.type == "password" && this.useEncryption)? 1 : 0) + "</UseEncryptedData>\r\n");
	this.stmt("   <Data><![CDATA[" + text + "]]></Data>\r\n");
	this.stmt("   <EncryptedData></EncryptedData>\r\n");
	this.stmt("   <ElementPath><![CDATA[" + item.info.xpath + "]]></ElementPath>\r\n");
	this.stmt("   <Duration>" + (parseInt(item.eventDuration) + Math.floor((Math.random() * 111) + 1)) + "</Duration>\r\n");
	this.stmt("   <Enable>1</Enable>\r\n");
	this.stmt("   <Optional>0</Optional>\r\n");
	this.stmt("</MacroEvent>\r\n");
}

AppSpiderRenderer.prototype.click = function (item) {
	this.stmt("<MacroEvent>\r\n");
	this.stmt("   <DbId>" + this.GUID() + "</DbId>\r\n");
	this.stmt("   <ParentDbId>00000000000000000000000000000000</ParentDbId>\r\n");
	this.stmt("   <WindowIndex>0</WindowIndex>\r\n");
	this.stmt("   <EventType>OnClick</EventType>\r\n");
	this.stmt("   <UseEncryptedData>0</UseEncryptedData>\r\n");
	this.stmt("   <Data><![CDATA[" + (item.info.value != undefined ? item.info.value : "") + "]]></Data>\r\n");
	this.stmt("   <EncryptedData></EncryptedData>\r\n");
	this.stmt("   <ElementPath><![CDATA[" + item.info.xpath + "]]></ElementPath>\r\n");
	this.stmt("   <Duration>" + (parseInt(item.eventDuration) + Math.floor((Math.random() * 111) + 1)) + "</Duration>\r\n");
	this.stmt("   <Enable>1</Enable>\r\n");
	this.stmt("   <Optional>0</Optional>\r\n");
	this.stmt("</MacroEvent>\r\n");
}

AppSpiderRenderer.prototype.delay = function (item) {
	this.stmt("<MacroEvent>\r\n");
	this.stmt("   <DbId>" + this.GUID() + "</DbId>\r\n");
	this.stmt("   <ParentDbId>00000000000000000000000000000000</ParentDbId>\r\n");
	this.stmt("   <WindowIndex>0</WindowIndex>\r\n");
	this.stmt("   <EventType>Delay</EventType>\r\n");
	this.stmt("   <UseEncryptedData>0</UseEncryptedData>\r\n");
	this.stmt("   <Data><![CDATA[]]></Data>\r\n");
	this.stmt("   <EncryptedData></EncryptedData>\r\n");
	this.stmt("   <ElementPath><![CDATA[]]></ElementPath>\r\n");
	this.stmt("   <Duration>" + (parseInt(item.eventDuration) + Math.floor((Math.random() * 111) + 1)) + "</Duration>\r\n");
	this.stmt("   <Enable>1</Enable>\r\n");
	this.stmt("   <Optional>0</Optional>\r\n");
	this.stmt("</MacroEvent>\r\n");
}

var AppSpiderMacroExporter = new AppSpiderRenderer();
