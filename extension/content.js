/* Author: Denis Podgurskii */
'use strict';

browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel != "ptkPopupToContent") return;

    if (message.type == "init") {
        var meta = document.createElement('meta');
        meta.id = 'pentestkitMetaId';
        meta.content = message.responseHeaders;
        (document.head || document.documentElement).appendChild(meta);

        var sDict = document.createElement('script');
        sDict.onload = function () {
            var sDetector = document.createElement('script');
            sDetector.src = browser.extension.getURL(message.detector);
            sDetector.id = "pentestkitDetectorId";
            (document.head || document.documentElement).appendChild(sDetector);
        };
        sDict.src = browser.extension.getURL(message.dictionary);
        sDict.id = "pentestkitDictionaryId";
        (document.head || document.documentElement).appendChild(sDict);

        meta.addEventListener('ready', function (event) {

            var s = document.getElementById("pentestkitDictionaryId");
            s.parentNode.removeChild(s);
            s = document.getElementById("pentestkitDetectorId");
            s.parentNode.removeChild(s);
            var m = document.getElementById("pentestkitMetaId");
            m.parentNode.removeChild(m);

            // HTML
            var clientHtml = new XMLSerializer().serializeToString(document).split('\n');

            clientHtml = clientHtml
                .slice(0, 1000).concat(clientHtml.slice(clientHtml.length - 1000))
                .map(line => line.substring(0, 1000))
                .join('\n');

            // Scripts
            const clientScripts = Array.prototype.slice
                .apply(document.scripts)
                .filter(script => script.src)
                .map(script => script.src)
                .filter(script => script.indexOf('data:text/javascript;') !== 0);

            try {
                browser.runtime.sendMessage({
                    channel: "ptkContentToPopup",
                    type: "complete",
                    apps: meta.content,
                    html: clientHtml,
                    scripts: clientScripts
                }).catch(e => e);;


            } catch (e) { }
        });

        ///////////////////////////////////
        var ws = document.getElementById("pentestkitWSId");
        if (!ws && message.enable_websocket) {
            var script = document.createElement('script');
            script.textContent = "var extensionId = " + JSON.stringify(browser.runtime.id);
            (document.head || document.documentElement).appendChild(script);
            script.parentNode.removeChild(script);

            var sWs = document.createElement('script');
            sWs.src = browser.extension.getURL("assets/js/ws.js");
            sWs.id = "pentestkitWSId";
            (document.head || document.documentElement).appendChild(sWs);
        }
    }

});


//Handle appsec products messaging
var AppSecMessagingController = {
    channelName: null,
    functionCall: null,
    params: null,
    data: null,

    reset: function () {
        this.channelName = null;
        this.functionCall = null;
        this.params = null;
        this.data = null;
    },

    process: function (message) {
        this.channelName = message.channelName;
        this.functionCall = message.data['function'];
        this.params = message.data['parameters'];
        this.data = message.data;

        if (this.functionCall == 'getVersion') {
            this.processGetVersion();
        }

        if (this.channelName == 'AppSpiderMacro') {
            this.processAppSecMacro();
        }

        if (this.channelName == 'pentestkitAppSpiderValidateChannel' || this.functionCall == 'runValidate') {
            this.processAppSecValidate();
        }

        if (this.channelName == 'AppSpiderBootstrap') {
            this.processAppSecBootstrap();
        }
    },

    processGetVersion: function () {
        var manifest = browser.runtime.getManifest();
        if (manifest && manifest.version) {
            var event = document.createEvent("CustomEvent");
            event.initCustomEvent(this.params['eventName'], true, true, { 'version': manifest.version });
            document.dispatchEvent(event);
        }
    },

    //AppSec recorder support
    processAppSecMacro: function () {
        switch (this.functionCall) {
            case 'start':
                browser.runtime.sendMessage({
                    channel: 'pentestkitAppSpiderRecorderChannel',
                    function: 'start',
                    parameters: { start_url: this.data.start_url }
                }).catch(e => e);;
                break;
            case 'stop':
                browser.runtime.sendMessage({
                    channel: 'pentestkitAppSpiderRecorderChannel',
                    function: 'stop'
                }).catch(e => e);;
                break;
            case 'export':
                var options = {
                    useEncryption: false,
                    min_duration: 4000,
                    element_path: false
                };
                if (this.params) options = this.params;

                var port = browser.runtime.connect({ name: "pentestkitAppSpiderRecorderPort" });
                port.postMessage({
                    function: 'exportMacro',
                    options: options
                });
                port.onMessage.addListener(function (msg) {
                    if (msg.result) {
                        document.getElementById(AppSecMessagingController.data.exportId).value = msg.result;
                    }
                });
                break;
        }
    },

    //AppSec validate support
    processAppSecValidate: function () {
        browser.runtime.sendMessage({
            channel: 'pentestkitAppSpiderValidateChannel',
            function: 'validate',
            parameters: encodeURIComponent(this.params.encoded_http_request)
        }).catch(e => e);;
    },

    processAppSecBootstrap: function () {
        switch (this.functionCall) {
            case 'startListening':
                if (this.params.start_url && this.params.jobID && this.params.restAPI)
                    browser.runtime.sendMessage({
                        channel: 'pentestkitAppSpiderBootstrapChannel',
                        function: 'start',
                        parameters: this.params
                    }).catch(e => e);;
                break;
            case 'stopListening': //IAS - stop and send traffic
            case 'sendTraffic': //ASE stop only, traffic sent on sendTraffic
                var port = browser.runtime.connect({ name: "pentestkitAppSpiderBootstrapPort" });
                port.postMessage({
                    function: this.functionCall
                });
                port.onMessage.addListener(function (result) {
                    if (result.output) {
                        if (result.bootstrapUsePut) {
                            var data = new FormData();
                            data.append(
                                'binaryContent',
                                new File(
                                    [JSON.stringify(result.output)],
                                    result.bootstrapEndpoint
                                )
                            );
                            var xhr = new XMLHttpRequest();
                            xhr.open('PUT', result.bootstrapEndpoint, true);
                            if (result.bootstrapPutParams.headers) {
                                for (var key in result.bootstrapPutParams.headers) {
                                    xhr.setRequestHeader(key, result.bootstrapPutParams.headers[key]);
                                }
                            }
                            xhr.onreadystatechange = function (e) {
                                if (4 == this.readyState) {
                                    window.postMessage({
                                        channelName: "AppSpiderBootstrap",
                                        message: 'COMPLETE'
                                    }, '*');
                                }
                            };
                            xhr.onerror = function () {
                                window.postMessage({
                                    channelName: "AppSpiderBootstrap",
                                    message: 'FAILED',
                                    error: new TypeError('Network request failed')
                                }, '*');
                            };
                            xhr.send(data);
                        } else {
                            var formData = new FormData();
                            formData.append("jobID", result.bootstrapJobID);
                            formData.append("encodedTraffic", window.btoa(result.output));

                            var request = new XMLHttpRequest();
                            request.open("POST", result.bootstrapEndpoint);
                            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                            request.send("jobID=" + result.bootstrapJobID + "&encodedTraffic=" + window.btoa(JSON.stringify(result.output)));
                        }
                    }
                });
                break;
            default:
                break;
        }
    }
};

/*
--------------------------------------------------
Backward compatibility with previous AppSec plugin
--------------------------------------------------
*/
browser.storage.local.get('pentestkit_settings').then(function (result) {
    if (result.pentestkit_settings && result.pentestkit_settings.main.general.enable_appspider) {

        //AppSec validate support
        var appspiderScript = document.getElementById("pentestkitAppSpiderId");
        var sDict = document.createElement('script');
        sDict.src = browser.extension.getURL('assets/js/content/appspider.js');
        sDict.id = "pentestkitAppSpiderId";
        (document.head || document.documentElement).appendChild(sDict);

        window.addEventListener("message", function (event) {
            var message = event.data;
            if (message.messageType == 'AppSpiderMessage') {
                AppSecMessagingController.process(message);
                setTimeout(function () {
                    AppSecMessagingController.reset();
                }, 100);
            }
        });
    }
});
