/* Author: Denis Podgurskii */
'use strict';

$(document).ready(function() {

    $('#reload').click(function() {
        indexController.run();
    });

    $('#activate_btn').click(function() {
        bgProxy.BrowserActions.activateTabsCapturing();
        location.reload();
    });
    $('#deactivate_btn').click(function() {
        bgProxy.BrowserActions.deactivateTabsCapturing();
        location.reload();
    });

    $('.item.clean').click(function() {
        bgProxy.clearTab(bgProxy.activeTab.tabId);
    });

    $('.item.export').click(function() {
        bgProxy.exportTraffic(bgProxy.activeTab.tabId);
    });

    $('#send_to_request').click(function() {
        window.location.href = "requestbuilder.html?frameId=" + $('#details_frameId').val() + '&requestId=' + $('#details_requestId').val() + '&index=' + $('#details_index').val();
    });

    indexController.run();

});

////////////////////////////////////
/* Index controller instance */
////////////////////////////////////
var indexController = {
    _tabObj: {},
    _requestHeaders: {},
    _responseHeaders: {},
    _owaspPassive: {},

    bindPages: function(tab) {
        //console.log(tab);
        this._tabObj = tab;
        this.bindInfo();
        this.bindTechnologies();
        this.bindFrames();
        this.bindOWASP();
    },

    bindTable: function(id, params) {
        params.paging = false;
        params.ordering = false;
        params.info = false;
        params.searching = false;
        params.sorting = false;

        if ($.fn.dataTable.isDataTable(id)) {
            var table = $(id).DataTable();
            table.clear().rows.add(params.data).draw();
        } else {
            $(id).DataTable(params);
        }
    },

    bindInfo: function() {
        $('#tab_title').text(this._tabObj.tab.title);
        $('#tab_url').text(this._tabObj.tab.url);
    },

    bindWebSocketMessage: function(msg, type) {
        //$('#websocket').text(type + " : " + msg);
        $('#websocket_traffic').val(function(i, text) {
            var text = text + "\r\n";
            text += type + " : " + msg;
            return text;
        });
    },

    bindTechnologies: function() {
        var jsonobj = $.parseJSON(this._tabObj.clientApps);
        var dt = new Array();
        for (var k in jsonobj.apps) {
            let link = '<a target="_blank" href="https://www.cvedetails.com/google-search-results.php?q=' + k + '+' + jsonobj.apps[k] + '"><i class="external alternate icon"></i></a>';
            dt.push([k, jsonobj.apps[k], link]);
        }
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{ title: "Name" }, { title: "Version" }, { title: "CVE" }]
        };
        this.bindTable('#tbl_technologies', params);

    },

    bindOWASP: function() {
        headersFindings.checkSecurityHeaders(this._tabObj);
        var params = {
            "data": headersFindings.findings,
            "columns": [{ title: "Header name" }, { title: "Error" }, { title: "Resource" }]
        };
        this.bindTable('#tbl_owasp', params);

    },


    bindFrames: function() {
        if(!this._tabObj || !this._tabObj.frames) return;
        
        var dt = new Array();
        //create data source
        this._tabObj.frames.forEach((frame, key) => {
            var i = 0, data = {}, ip = '';
            frame.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        if (i == 0) {
                            ip = request.ip ? request.ip : '';
                            var parser = document.createElement('a');
                            parser.href = request.url;
                            data.frame = request.parentFrameId == -1 ? "main" : "iframe";
                            data.url = parser.hostname;
                        }
                        if (request.ip && ip.indexOf(request.ip) < 0) ip += ", " + request.ip;
                        i++;
                    } catch (e) {}

                });
            });
            dt.push(['', key, data.frame, data.url, ip]);
        });

        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function(data, type, row) {
                    return '<i class="expandchild plus square icon big"></i>';
                },
                "className": "expandbtn"

            }, { "visible": false }, { title: "Frame" }, { title: "Url" }, { title: "IP" }]
        };
        this.bindTable('#tbl_frames', params);

        $('.expandchild.plus.icon').click(function() {
            var table = $('#tbl_frames').DataTable(),
                tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data();
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                $(this).removeClass('shown minus');
                $(this).addClass('shown plus');
            } else {
                // Open this row
                row.child('<div style="padding-left: 45px"><table class="ui celled table stackable small fullwidth" id="tbl_frame_' + values[1] + '" >' +
                    '<thead></thead><tbody></tbody></table></div>').show();
                $(this).removeClass('shown plus');
                $(this).addClass('shown minus');
                indexController.bindRequests(values[1]);
            }
        });
        $('.expandchild.plus.icon:first').trigger('click');

    },


    bindRequests: function(index) {
        var dt = new Array();
        this._tabObj.frames.get(index).forEach((requests, key) => {
            var i = 0;
            requests.forEach((request, k) => {
                var parser = document.createElement('a');
                parser.href = request.url;
                dt.push([i, key, request.frameId, parser.hostname, request.type, request.statusCode ? request.statusCode : '',
                    request.method, request.fromCache ? request.fromCache : 'unknown', request.ip ? request.ip : ''
                ]);
                i++;
            });
            
        });

        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{ "visible": false }, { "visible": false }, { "visible": false }, { title: "Url" }, { title: "Type" }, { title: "Status" }, { title: "Method" }, { title: "Cached" }, { title: "IP" },
                {
                    render: function(data, type, row) {
                        return '<button type="button" class="request_details">Details</button>';
                    }
                }
            ]
        };
        this.bindTable('#tbl_frame_' + index, params);

        $('#tbl_frame_' + index + " tbody tr:first").addClass('active');

        $('.request_details').on('click', function() {
            var table = $(this).closest('table').DataTable(),
                tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data();
            indexController.bindRequestDetails(values[0], values[1], values[2]);
            $('.ui.modal').modal('show');
        });

    },

    bindRequestDetails: function(index, requestId, frameId) {
        var $form = $('#details_form');
        $form.form('clear');
        var request = this._tabObj.frames.get(frameId).get(requestId)[index];
        var obj = {};

        if (request.requestHeaders)
            obj.details_request_headers = request.requestHeaders.map(x => x.name + ": " + x.value).join('\n');
        if (request.requestBody && request.requestBody.formData) {
            var params = Object.keys(request.requestBody.formData).map(function(k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(request.requestBody.formData[k])
            }).join('&')
            obj.details_request_headers += "\n\n" + params;
        }

        if (request.responseHeaders)
            obj.details_response_headers = request.responseHeaders.map(x => x.name + ": " + x.value).join('\n');


        obj.details_frameId = frameId;
        obj.details_requestId = requestId;
        obj.details_index = index;
        $form.form('set values', obj);
    },

    run: function() {

        if (!bgProxy.BrowserActions.isTabsCapturingActive) {
            $('#activate_message').show();
        } else {
            $('#deactivate_message').show();
        }

        var activeTab = bgProxy.activeTab;
        if (activeTab == null) return;

        var tabObj = bgProxy.getTab(activeTab.tabId);
        if(tabObj == null){
            $('#tab_title').text('Active tab has not been initialized. Try to reload the tab and re-open the extension.');
        }
        this.analyzeHeaders(tabObj);

        chrome.tabs.sendMessage(activeTab.tabId, {
            channel: "ptkPopupToContent",
            type: "init",
            detector: bgProxy.detector,
            dictionary: bgProxy.dictionary,
            runner: bgProxy.runner,
            responseHeaders: JSON.stringify(this._responseHeaders)
        });

    },

    complete: function(tab, request) {
        bgProxy.setTab(tab.id, {
            tab: tab,
            clientApps: request.apps,
            clientHtml: request.html,
            clientScripts: request.scripts
        }, 'clientApps');
        var tabObj = bgProxy.getTab(tab.id);
        if (tabObj != null && typeof tabObj.frames != 'undefined') {

            this.bindPages(tabObj);
        }
    },

    analyzeHeaders: function(tabObj) {
        this._responseHeaders = {};
        if (!tabObj || !tabObj.frames) return;
        tabObj.frames.forEach((fV, fK) => {
            fV.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        request.responseHeaders.forEach((hV, hK) => {
                            if (!(hV.name in this._responseHeaders))
                                this._responseHeaders[hV.name] = hV.value;
                        });
                    } catch (e) {}

                });
            });
        });
    }
};

////////////////////////////////////
/* Chrome runtime events handlers */
////////////////////////////////////
chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {

    if (request.channel == "ptkContentToPopup") {
        if (request.type == "complete")
            indexController.complete(sender.tab, request);
        if (request.type == "websocket") {
            var data = request.data;
            indexController.bindWebSocketMessage(data.message, data.type);
        }
    }
    if (request.channel == "ptkBackgroundToPopup" && request.type == "active tab changed") {
        if ($('#reload_on_active').parent().checkbox('is checked')) {
            indexController.run();
        }
    }

    if (request.channel == "ptkBackgroundToPopup" && request.type == "requests source resized") {
            indexController.bindFrames();
    }

    if (request.type == "send") {
        $('#websocket_traffic').val($('#websocket_traffic').val() + request.message);
    }
});