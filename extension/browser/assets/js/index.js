/* Author: Denis Podgurskii */
'use strict';

$(document).ready(function () {

    $('#reload').click(function () {
        indexController.run();
    });


    $('.item.clean').click(function () {
        bgProxy.clearTab(bgProxy.activeTab.tabId);
        indexController.run();
    });

    $("input[name='deactivate_capturing']").on('change', e => {
        var $form = $('#dashboard_form'), values = $form.form('get values');

        if (values['deactivate_capturing'] == 'on')
            bgProxy.BrowserActions.deactivateTabsCapturing();
        else
            bgProxy.BrowserActions.activateTabsCapturing();
    });


    $('#send_to_request').click(function () {
        window.location.href = "requestbuilder.html?frameId=" + $('#details_frameId').val() + '&requestId=' + $('#details_requestId').val() + '&index=' + $('#details_index').val();
    });

    $(document).on("click", ".request_details", function () {
        var table = $(this).closest('table').DataTable(),
            tr = $(this).closest('tr'),
            row = table.row(tr),
            values = table.row($(this).parents('tr')).data();
        window.location.href = "requestbuilder.html?frameId=" + values[3] + '&requestId=' + values[2] + '&index=' + values[1];

    });
    indexController.run();

});

////////////////////////////////////
/* Index controller instance */
////////////////////////////////////
var indexController = {
    _tabObj: {},
    _requestHeaders: {},
    _responseHeaders: {},
    _owaspPassive: {},

    bindPages: function (tab) {
        //console.log(tab);
        this._tabObj = tab;
        this.bindInfo();
        this.bindTechnologies();
        this.bindFrames();
        this.bindOWASP();
    },

    bindInfo: function () {
        //$('#tab_title').text(this._tabObj.tab.title);


        var $form = $('#dashboard_form');
        if (bgProxy.BrowserActions.isTabsCapturingActive) {
            $form.form('set value', 'deactivate_capturing', false);
            if (this._tabObj && this._tabObj.tab) {
                $('#dashboard_message_text').text(this._tabObj.tab.url);
            } else {
                $('#dashboard_message_text').text('Active tab has not been initialized. Try to reload the tab and re-open the extension.');
            }
        } else {
            $form.form('set value', 'deactivate_capturing', true);
            $('#dashboard_message_text').html(`Tabs capturing disabled.
            <button class="ui left black floated small button " id="activate_btn" style="height: 25px;
            padding-top: 6px;">Enable it now</button> and reload the tab.`);
            $('#activate_btn').on('click', e => {
                bgProxy.BrowserActions.activateTabsCapturing();
            });
        }

    },

    bindWebSocketMessage: function (msg, type) {
        //$('#websocket').text(type + " : " + msg);
        $('#websocket_traffic').val(function (i, text) {
            var text = text + "\r\n";
            text += type + " : " + msg;
            return text;
        });
    },

    bindTechnologies: function () {
        var jsonobj = $.parseJSON(this._tabObj.clientApps);
        var dt = new Array();
        for (var k in jsonobj.apps) {
            let link = '<a target="_blank" href="https://www.cvedetails.com/google-search-results.php?q=' + k + '+' + jsonobj.apps[k] + '"><i class="external alternate icon"></i></a>';
            dt.push([k, jsonobj.apps[k], link]);
        }
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{ title: "Name", width: "100px" }, { title: "Version" }, { title: "CVE" }]
        };
        bindTable('#tbl_technologies', params);

    },

    bindOWASP: function () {
        headersFindings.checkSecurityHeaders(this._tabObj);
        var params = {
            "data": headersFindings.findings,
            "columns": [{ title: "Header name", width: "100px" }, { title: "Error" }]
        };
        bindTable('#tbl_owasp', params);

    },


    bindFrames: function () {
        if (!this._tabObj || !this._tabObj.frames) return;

        var dt = new Array();
        //create data source
        this._tabObj.frames.forEach((frame, key) => {
            var i = 0, data = {}, ip = '';
            frame.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        if (i == 0) {
                            ip = request.ip ? request.ip : '';
                            var parser = document.createElement('a');
                            parser.href = request.url;
                            data.frame = request.parentFrameId == -1 ? "main" : "iframe";
                            data.url = parser.hostname;
                        }
                        if (request.ip && ip.indexOf(request.ip) < 0) ip += ", " + request.ip;
                        i++;
                    } catch (e) { }

                });
            });
            dt.push(['', key, data.frame, data.url, ip]);
        });
        dt = dt.sort(function (a, b) {
            if (a[2] < b[2]) { return 1; }
            if (a[2] > b[2]) { return -1; }
            return 0;
        });
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function (data, type, row) {
                    return '<i class="expandchild plus square icon"></i>';
                },
                "className": "expandbtn"

            }, { "visible": false }, { title: "Frame" }, { title: "Url" }, { title: "IP", class: "frameIP" }]
        };
        var table = bindTable('#tbl_frames', params);

        $('.expandchild.plus.icon').click(function () {
            var tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data();
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                $(this).removeClass('shown minus');
                $(this).addClass('shown plus');
            } else {
                // Open this row
                row.child(
                    `<div style="padding-left: 45px">
                        <table class="ui celled table stackable small fullwidth" id="tbl_frame_` + values[1] + `" > 
                            <thead>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>`
                ).show();
                $(this).removeClass('shown plus');
                $(this).addClass('shown minus');
                indexController.bindRequests(values[1]);
            }
        });
        $('.expandchild.plus.icon:first').trigger('click');

    },


    bindRequests: function (index) {
        var dt = new Array();
        this._tabObj.frames.get(index).forEach((requests, key) => {
            var i = 0;
            requests.forEach((request, k) => {
                var parser = document.createElement('a');
                parser.href = request.url;
                dt.push(['', i, key, request.frameId, parser.hostname.substr(0, 40), parser.pathname.substr(0, 40), request.method, request.statusCode ? request.statusCode : '',
                    request.type, request.ip ? request.ip : ''
                ]);
                i++;
            });

        });

        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function (data, type, row) {
                    return '<div class="ui basic icon small button request_details"><i class="keyboard large icon" title="Send to request builder"></i></div>';
                }
            }, { "visible": false }, { "visible": false }, { "visible": false }, { title: "Host" }, { title: "Path" }, { title: "Method" }, { title: "Status" }, { title: "Type" }, { title: "IP" }

            ]
        };
        var tableId = '#tbl_frame_' + index;
        var table = bindTable(tableId, params);

        table.columns().flatten().each(function (colIdx) {
            var title = $(table.column(colIdx).header()).text();
            if (title) {
                var select = $('<br/><input type="text" placeholder="Search ' + title + '" />')
                    .appendTo(
                        table.column(colIdx).header()
                    )
                    .on('keyup change clear', function () {
                        table
                            .column(colIdx)
                            .search($(this).val())
                            .draw();
                    });
            }
        });

        // $(tableId).on("click", ".request_details", function () {
        //     var table = $(this).closest('table').DataTable(),
        //         tr = $(this).closest('tr'),
        //         row = table.row(tr),
        //         values = table.row($(this).parents('tr')).data();
        //     window.location.href = "requestbuilder.html?frameId=" + values[3] + '&requestId=' + values[2] + '&index=' + values[1];

        // });

        // $('.request_details').on('click', function () {
        // });
    },

    run: function () {

        var activeTab = bgProxy.activeTab;
        if (activeTab == null) return;

        var tabObj = bgProxy.getTab(activeTab.tabId);
        this._tabObj = tabObj;
        this.bindInfo();

        this.analyzeHeaders(tabObj);

        chrome.tabs.sendMessage(activeTab.tabId, {
            channel: "ptkPopupToContent",
            type: "init",
            detector: bgProxy.detector,
            dictionary: bgProxy.dictionary,
            responseHeaders: JSON.stringify(this._responseHeaders),
            enable_websocket: false
        });
    },

    complete: function (tab, request) {
        bgProxy.setTab(tab.id, {
            tab: tab,
            clientApps: request.apps,
            clientHtml: request.html,
            clientScripts: request.scripts
        }, 'clientApps');
        var tabObj = bgProxy.getTab(tab.id);
        if (tabObj != null && typeof tabObj.frames != 'undefined') {
            this.bindPages(tabObj);
        }
    },

    analyzeHeaders: function (tabObj) {
        this._responseHeaders = {};
        if (!tabObj || !tabObj.frames) return;
        tabObj.frames.forEach((fV, fK) => {
            fV.forEach((rV, rK) => {
                rV.forEach((request, key) => {
                    try {
                        request.responseHeaders.forEach((hV, hK) => {
                            if (!(hV.name in this._responseHeaders))
                                this._responseHeaders[hV.name] = hV.value;
                        });
                    } catch (e) { }

                });
            });
        });
    }
};

////////////////////////////////////
/* Chrome runtime events handlers */
////////////////////////////////////
chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptkBackgroundToPopup" && message.type == "active tab changed") {
        if ($("input[name='reload_on_active']").parent().checkbox('is checked')) {
            indexController.run();
        }
    }
    if (message.channel == "ptkBackgroundToPopup" && message.type == "requests source resized") {
        indexController.bindFrames();
    }

    if (message.channel == "ptkContentToPopup" && message.type == "complete") {
        chrome.tabs.get(bgProxy.activeTab.tabId, function (tab) {
            indexController.complete(tab, message);
        });
    }
});