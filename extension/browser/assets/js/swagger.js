/* Author: Denis Podgurskii */
'use strict';

$(document).ready(function () {

    var $form = $('#swagger_form');
    $form.form({
        fields: {
            swagger_url: {
                identifier: 'swagger_url',
                rules: [{
                    type: 'regExp',
                    value: /^((http|https|file):\/\/){1}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])?(:+[0-9]+)?([\/\?]{1}.*)?$/i,
                }]
            }
        }
    });

    $('.button.start').click(function () {
        $form.form('validate form');
        if (!$form.form('is valid')) return;

        var values = $form.form('get values');
        var specUrl = values['swagger_url']; //'http://hackazon.webscantest.com/swagger.json';
        swaggerController.run(specUrl);
    });

    $('.reset.swagger').click(function () {
        swaggerController.bindTable('#tbl_endpoints', {
            "data": [],
            "columns": this.ebdpointsColumns
        });
    });

    chrome.tabs.query({ 'active': true, 'lastFocusedWindow': true, 'currentWindow': true }, function (tabs) {
        swaggerController.run(tabs[0].url);
    });

});



////////////////////////////////////
/* Swagger controller instance */
////////////////////////////////////
var swaggerController = {

    endpointsColumns: [{
        render: function (data, type, row) {
            return '<i class="expandchild plus square icon endpoints"></i>';
        },
        "className": "expandbtn"

    },
    { title: "Schemes" }, { title: "Method" }, { title: "Host" }, { title: "URL" }, { title: "Details" }],

    definitionsColumns: [{
        render: function (data, type, row) {
            return '<i class="expandchild plus square icon definitions"></i>';
        },
        "className": "expandbtn"

    }, { title: "Name" }, { title: "Type" }],

    swaggerClient: null,



    run: function (specUrl) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", specUrl, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && (xhr.status === 200 || xhr.status == 0)) {
                try {
                    var swaggerClient = new SwaggerClient({ spec: JSON.parse(xhr.responseText) })
                        .then(function (swaggerClient) {
                            swaggerController.swaggerClient = swaggerClient;
                            swaggerController.bindEndpoints();
                            swaggerController.bindDefinitions();
                        }, function (reason) {
                            console.log("failed to load the spec" + reason);
                        });;
                } catch (e) { }
            }
        }
        xhr.send(null);
    },

    bindEndpoints: function () {
        var dt = new Array();

        var urlParser = parseUrl(this.swaggerClient.url);
        var paths = this.swaggerClient.spec.paths;
        var schema = this.swaggerClient.spec.schemes ? this.swaggerClient.spec.schemes.join(', ').toUpperCase() : urlParser.protocol.replace(':', '').toLocaleUpperCase();
        var host = this.swaggerClient.spec.host ? this.swaggerClient.spec.host : urlParser.hostname;
        for (var path in paths) {
            for (var method in paths[path]) {
                dt.push(['', schema, method.toUpperCase(), host, path, '']);
            }
        }
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": this.endpointsColumns
        };
        bindTable('#tbl_endpoints', params);

        $(".expandchild.plus.icon.endpoints").unbind("click");
        $('.expandchild.plus.icon.endpoints').click(function () {
            var table = $('#tbl_endpoints').DataTable(),
                tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data();
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                $(this).removeClass('shown minus');
                $(this).addClass('shown plus');
            } else {
                // Open this row
                var path = values[4], method = values[2].toLowerCase();
                row.child(swaggerController.formatEndpoint(path, method)).show();
                $(this).removeClass('shown plus');
                $(this).addClass('shown minus');


                $(".ui.button.properties").unbind("click");
                $('.ui.button.properties').click(function () {
                    var path = $(this).attr('data-path'),
                        method = $(this).attr('data-method'),
                        r = $(this).attr('data-response');
                    var txt = swaggerController.formatResponseProperties(path, method, r);
                    $('.ui.modal .description').html(txt);
                    $('.ui.modal').modal('show');
                    //console.log(txt);
                    return false;
                });
            }
        });
    },


    bindDefinitions: function () {
        var dt = new Array();

        var urlParser = parseUrl(this.swaggerClient.url);
        var definitions = this.swaggerClient.spec.definitions;
        for (var def in definitions) {
            dt.push(['', def, (definitions[def].type ? definitions[def].type : "")]);
        }
        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": this.definitionsColumns
        };
        bindTable('#tbl_definitions', params);


        $(".expandchild.plus.icon.definitions").unbind("click");
        $('.expandchild.plus.icon.definitions').click(function () {
            var table = $('#tbl_definitions').DataTable(),
                tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data();
            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                $(this).removeClass('shown minus');
                $(this).addClass('shown plus');
            } else {
                // Open this row
                var name = values[1];
                row.child(swaggerController.formatDefinition(name)).show();
                $(this).removeClass('shown plus');
                $(this).addClass('shown minus');


                $(".ui.button.properties").unbind("click");
                $('.ui.button.properties').click(function () {
                    var path = $(this).attr('data-path'),
                        method = $(this).attr('data-method'),
                        r = $(this).attr('data-response');
                    var txt = swaggerController.formatResponseProperties(path, method, r);
                    $('.ui.modal .description').html(txt);
                    $('.ui.modal').modal('show');
                    //console.log(txt);
                    return false;
                });
            }
        });
    },

    formatResponseProperties: function (path, method, r) {
        if (swaggerController.swaggerClient) {
            var response = this.swaggerClient.spec.paths[path][method].responses[r];
            return '<pre>' + JSON.stringify(response.schema.properties, null, 4) + '</pre>';
        }
    },

    formatEndpoint: function (path, method) {
        var item = this.swaggerClient.spec.paths[path][method];
        var info = '<div style="padding-left: 45px"><div class="ui message">' +
            (item.description ? item.description : "") +
            '<table class="ui celled table stackable small fullwidth">' +
            '<tr>' +
            '<td>' + (item.consumes ? 'Consumes:</td><td> <code>' + item.consumes.join('<br/>') + '</code></td>' : "") + '</td>' +
            '<td>' + (item.produces ? 'Produces:</td><td> <code>' + item.produces.join('<br/>') + '</code></td>' : "") + '</td>' +
            '</tr>' +
            '</table></div>';

        if (item.parameters) {
            info += '<div class="ui message"><b>Parameters</b><table class="ui celled table stackable small fullwidth">' +
                '<thead><tr>' +
                '<th class="three wide">Name</th>' +
                '<th class="one wide">In</th>' +
                '<th class="one wide">Type</th>' +
                '<th class="one wide">Required</th>' +
                '<th class="one wide">More</th>' +
                '</tr></thead>';
            item.parameters.forEach(function (p) {
                info += '<tr>';
                info += p.name ? '<td>' + p.name + '</td>' : '<td></td>';
                info += p.in ? '<td>' + p.in + '</td>' : '<td></td>';
                info += p.type ? '<td>' + p.type + '</td>' : '<td></td>';
                info += p.required ? '<td>' + p.required + '</td>' : '<td>false</td>';
                info += p.token ? '<td>' + p.token + '</td>' : '<td></td>';
                info += '</tr>';
            });

            info += '</table></div>';
        }


        if (item.responses) {
            info += '<div class="ui message"><b>Responses</b><table class="ui celled table stackable small fullwidth">' +
                '<thead><tr>' +
                '<th class="one wide">Status</th>' +
                '<th class="three wide">Description</th>' +
                '<th class="one wide">Ref</th>' +
                '<th class="one wide">Properties</th>' +
                '</tr></thead>';

            for (var r in item.responses) {
                info += '<tr>';
                info += '<td>' + r + '</td>';
                info += item.responses[r].description ? '<td>' + item.responses[r].description + '</td>' : '<td></td>';
                info += (item.responses[r].schema && item.responses[r].schema['$$ref']) ? '<td>' + item.responses[r].schema['$$ref'] + '</td>' : '<td></td>';
                if (item.responses[r].schema && item.responses[r].schema['properties']) {
                    info += '<td><button class="ui button properties" data-path="' + path + '" data-method="' + method + '" data-response="' + r + '">Properties</button></td>';
                }
                info += '</tr>';
            }

            info += '</table></div>';
        }
        info += '</div>';
        return info;
    },

    formatDefinition: function (name) {
        var item = this.swaggerClient.spec.definitions[name];
        var info = '<div style="padding-left: 45px">';
        if (item.required) {
            info += '<div class="ui message">' +
                '<table class="ui celled table stackable small fullwidth">' +
                '<tr><td>Required</td>' +
                '<td>' + ('<code>' + item.required.join(', ') + '</code>') + '</td>' +
                '</tr>' +
                '</table></div>';
        }

        if (item.properties) {
            info += '<div class="ui message"><b>Properties</b><table class="ui celled table stackable small fullwidth">' +
                '<thead><tr>' +
                '<th class="three wide">Name</th>' +
                '<th class="one wide">Type</th>' +
                '<th class="one wide">Format</th>' +
                '</tr></thead>';
            for (var p in item.properties) {
                info += '<tr>';
                info += '<td>' + p + '</td>';
                info += item.properties[p].type ? '<td>' + item.properties[p].type + '</td>' : '<td></td>';
                info += item.properties[p].format ? '<td>' + item.properties[p].format + '</td>' : '<td></td>';
                info += '</tr>';
            }

            info += '</table></div>';
        }

        info += '</div>';
        return info;
    }
};
