/* Author: Denis Podgurskii */
'use strict';

$(document).ready(function () {

    $('.rbsettings').on('click', function () {
        $('.request_forms_container').hide("slow");
        $('.request_settings_container').show("slow");
    });
    $('#closesettings').on('click', function () {
        $('.request_settings_container').hide("slow");
        $('.request_forms_container').show("slow");
    });

    $('#add_request').on('click', function () {
        requestBuilderController.addNewRequest();
    });
    
    $(document).trigger("initEvents", 'tab_0');
    $(document).trigger("resetForm", 'request_0');

    var params = new URLSearchParams(window.location.search);
    if (params.has('frameId') && params.has('requestId')) {
        var index = parseInt(params.get('index')),
            requestId = params.get('requestId'),
            frameId = parseInt(params.get('frameId')),
            tab = bgProxy.getTab(bgProxy.activeTab.tabId),
            request = tab.frames.get(frameId).get(requestId)[index];

        $(document).trigger("initForm", request);
    } else if (params.has('validateRequest')) {
        requestBuilderController.validateRequest(params.get('validateRequest').replace(" ", "+"));
    }

    
});

$(document).on("initEvents", function (e, data) {
    $('.reset').unbind("click");
    $('.reset').on('click', function () {
        $(document).trigger("resetForm", $(this).closest('.ui.tab.active').attr('id'));
    });

    $('.send').unbind("click");
    $('.send').on('click', function () {
        $(document).trigger("sendRequest", $(this).closest('.ui.tab.active').attr('id'));
    });

    $('.window.close.icon').unbind("click");
    $('.window.close.icon').on('click', function () {
        $('.ui.inverted.dimmer').addClass('active');
        $(document).trigger("removeTab", $(this).parent().attr('index'));
        setTimeout(function () {
            $('.ui.inverted.dimmer').removeClass('active');
        }, 200);
    });

    $('.request_tab span').unbind("dblclick");
    $('.request_tab span').on('dblclick', function () {
        $(this).attr('contentEditable', true);
        $(this).focus();
    });

    $('.request_tab span').unbind("blur");
    $('.request_tab span').on('blur', function () {
        $(this).attr('contentEditable', false);
    });

    $("[name=request]").unbind('paste change');
    $("[name=request]").bind('paste change', null, function (e) {
        var formId = $(this).closest('.ui.tab.active').attr('id');
        setTimeout(function () {
            $(document).trigger("parseRequest", formId);
        }, 100);
    });

    $('.showHtml').unbind("click");
    $('.showHtml').on('click', function () {
        var formId = $(this).closest('.ui.tab.active').attr('id');
        var $form = $('#' + formId + ' #request_form');
        var values = $form.form('get values');
        var schema = bgProxy.Request.parseRequestString(values.request, values);
        var baseURI = schema.uri.protocol + "://" + schema.uri.url + ":" + schema.uri.port + "/";

        var htmlString = $(this).closest('.response_view').find('[name="response_body"]').val();
        htmlString = htmlString.replace('<head>', '<head><base href="' + baseURI + '" />');
        var dataUrl = 'data:text/html;base64,' + btoa(htmlString);

        $('#dialogResponseHtml').modal('show');
        $('#dialogResponseHtmlFrame').prop('src', dataUrl);
        $('#dialogResponseHtmlFrame').contents().find('head').append("http://webscantest.com/")

        return false;
    });
});

$(document).on("removeTab", function (e, index) {
    $('[data-tab=tab_' + index + ']').remove();
    $(".ui.tab.active").removeClass('active');
    $(".request_tab").removeClass('active');
    $('[data-tab=tab_0]').addClass('active');
    $('#request_0').addClass('active');
});

$(document).on("resetForm", function (e, formId) {
    var $form = $('#' + formId + ' #request_form');
    $form.form('clear');
    $form.form('set values', { 'request_method': 'GET', 'request_protocol': 'HTTP', 'request_redirect': true });

    $form.form({
        fields: {
            request_method: {
                identifier: 'request_method',
                rules: [{ type: 'empty' }]
            },
            request_protocol: {
                identifier: 'request_protocol',
                rules: [{ type: 'empty' }]
            },
            request_url: {
                identifier: 'request_url',
                rules: [{
                    type: 'regExp',
                    value: /(^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$)|(^((?!:\/\/)([[a-zA-Z]{1,}[0-9]?]+\.)?([a-zA-Z0-9-]+\.){1,}[a-zA-Z]{2,30})$)/i,
                }]
            },
            request_port: {
                identifier: 'request_port',
                rules: [{ type: 'integer' }]
            },
            request: {
                identifier: 'request',
                rules: [{ type: 'empty' }]
            }
        }
    });

});

$(document).on("initForm", function (e, request) {
    if (request && request.requestHeaders) {
        var parser = document.createElement('a');
        parser.href = request.url;

        var protocol = request.url.indexOf('https://') < 0 ? 'http' : 'https';
        var path = request.method + ' ' + request.url.replace(protocol + '://' + parser.hostname, '') + ' HTTP/1.1';
        var headersStr = path + '\n' + request.requestHeaders.map(x => x.name + ": " + x.value).join('\n')
        if (headersStr.indexOf('Host:') < 0) {
            headersStr += "\nHost: " + parser.hostname;
        }

        if (request.requestBody && request.requestBody.formData) {
            var params = Object.keys(request.requestBody.formData).map(function (k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(request.requestBody.formData[k])
            }).join('&')
            headersStr += "\n\n" + params;
        }


        var $form = $('#request_0 #request_form');
        $form.form('set values', {
            'request_method': request.method,
            'request_protocol': protocol,
            'request': headersStr,
            'request_url': parser.hostname,
        });
    }
});

$(document).on("parseRequest", function (e, formId) {
    var $form = $('#' + formId + ' #request_form');
    var request = $form.form('get value', 'request');
    var schema = bgProxy.Request.parseRequestString(request);
    $form.form('set value', 'request_method', schema.request.method);
    $form.form('set value', 'request_url', schema.uri.url);
    $form.form('set value', 'request_port', schema.uri.port);
});

$(document).on("sendRequest", function (e, formId) {
    var schema = {};
    var $form = $('#' + formId + ' #request_form');
    $form.form('set value', 'response_headers', '');
    $form.form('set value', 'response_body', '');

    var protocol = $form.form('get value', 'request_protocol'),
        port = $form.form('get value', 'request_port');
    if (protocol == 'http' && (port == "" || port == 443)) {
        $form.form('set value', 'request_port', 80);
    }
    if (protocol == 'https' && (port == "" || port == 80)) {
        $form.form('set value', 'request_port', 443);
    }

    $form.form('validate form');

    if ($form.form('is valid')) {
        var values = $form.form('get values');

        var schema = bgProxy.Request.parseRequestString(values.request, values);
        var x_pentestkitHeaders = btoa(JSON.stringify(schema.request.headers));
        schema.request.headers.push({ name: 'X-PenetrationTestingKitHeaders', value: x_pentestkitHeaders });
        var jsonHeaders = {};
        var t = Object.keys(schema.request.headers).map(function (key, index) {
            jsonHeaders[schema.request.headers[key].name] = schema.request.headers[key].value;
        });

        var request = new Request(schema.request.url, {
            method: schema.request.method,
            body: schema.request.body,
            mode: 'cors',
            redirect: values.request_redirect ? "follow" : "manual",
            credentials: 'include',
            headers: jsonHeaders
        });

        fetch(request).then(function (response) {
            let headers = bgProxy.pentestkitRequest.statusLine + "\n";
            bgProxy.pentestkitRequest.headers.forEach(function (value, key) {
                value.forEach(function (val, key) {
                    headers += (val.name != "" ? val.name + ": " : "") + val.value + "\r\n";
                });
            });

            bgProxy.pentestkitRequest.cookie = {};
            bgProxy.pentestkitRequest.statusLine = "";
            bgProxy.pentestkitRequest.headers.clear();

            $form.form('set value', 'response_headers', headers);
            response.text().then(function (body) {
                $form.form('set value', 'response_body', body);
            });
        }).catch(function (error) {
            $form.form('set value', 'response_headers', error.message);
            console.log(error);
        });
    }
});





////////////////////////////////////
/* Index controller instance */
////////////////////////////////////
var requestBuilderController = {

    validateRequest: function (data) {
        var requests = atob(data).split('#H#G#F#E#D#C#B#A#');
        for (var i = 0; i < requests.length; i++) {
            if (i > 0) this.addNewRequest();

            var r_r = requests[i].split('#A#B#C#D#E#F#G#H#');
            var $form = $('#request_' + i + ' #request_form');
            $form.form('set values', {
                'request': r_r[0].trim()
            });
            $('#request_' + i + ' #request_form [name=request]').trigger("paste", null);
            $('#tab_' + i).find('span').text('Attack #' + (i + 1));
        }
    },

    addNewRequest: function () {

        var lastId = 'tab_0',
            lastIndex = 0,
            newIndex = 0;
        $('#tabMenuId .item').each(function (i, obj) {
            lastId = $(obj).attr('id');
            var i = parseInt($(obj).attr('index'));
            lastIndex = i > lastIndex ? i : lastIndex;
            $(obj).removeClass('active');
        });
        newIndex = lastIndex + 1;

        $("#tabMenuId .item.active").removeClass('active');
        $(".tab.segment.active").removeClass('active');

        var newItem = '<a class="item active request_tab" ' +
            'index="' + newIndex + '" id="tab_' + newIndex + '" data-tab="tab_' + newIndex + '"><span>Request</span><i class="window close icon"></i></a>';
        $('#' + lastId).after(newItem);

        $("#request_" + lastIndex).after($("#request_0").
            clone().
            attr('id', 'request_' + newIndex).
            attr('data-tab', 'tab_' + newIndex).
            addClass('active'));

        $(document).trigger("initEvents", newIndex);
        $(document).trigger("resetForm", 'request_' + newIndex);
        $('.menu .item').tab();
        return newIndex;
    }
}