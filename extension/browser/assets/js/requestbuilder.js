/* Author: Denis Podgurskii */
'use strict';

$(document).ready(function () {

    $('.rbsettings').on('click', function () {
        $('.request_forms_container').hide("slow");
        $('.request_settings_container').show("slow");
    });
    $('#closesettings').on('click', function () {
        $('.request_settings_container').hide("slow");
        $('.request_forms_container').show("slow");
    });

    $('#add_request').on('click', function () {
        requestBuilderController.addNewRequest();
    });

    $('#scan_btn').on('click', function () {
        requestBuilderController.runScan($('.ui.tab.active').attr('id'));
    });

    $(document).on("click", ".reset", function () {
        $(document).trigger("resetForm", $(this).closest('.ui.tab.active').attr('id'));
    });

    $(document).on("click", ".send", function () {
        $(document).trigger("sendRequest", $(this).closest('.ui.tab.active').attr('id'));
    });

    $(document).on("click", ".window.close.icon", function () {
        $('.ui.inverted.dimmer').addClass('active');
        $(document).trigger("removeTab", $(this).parent().attr('index'));
        setTimeout(function () {
            $('.ui.inverted.dimmer').removeClass('active');
        }, 200);
    });

    $(document).on("dblclick", ".request_tab span", function () {
        $(this).attr('contentEditable', true);
        $(this).focus();
    });

    $(document).on("blur", ".request_tab span", function () {
        $(this).attr('contentEditable', false);
    });

    $(document).on("click", ".showHtml", function () {
        var formId = $(this).closest('.ui.tab.active').attr('id');
        var $form = $('#' + formId + ' #request_form');
        var values = $form.form('get values');
        var schema = bgProxy.Request.parseRawRequest(values);
        var baseURI = schema.request.url.protocol + "//" + schema.request.url.host + "/";

        var htmlString = $(this).closest('.response_view').find('[name="response_body"]').val();
        htmlString = htmlString.replace(/<(head)(.+)?>/, "<$1$2><base href='" + baseURI + "' />");
        var dataBase64 = 'data:text/html;base64,' + btoa(unescape(encodeURIComponent(htmlString)));
        var data = 'data:text/html,' + unescape(encodeURIComponent(htmlString));

        const blob = new Blob([unescape(encodeURIComponent(htmlString))], { type: 'text/html' });
        var srcData = URL.createObjectURL(blob)

        $('#dialogResponseHtml').modal('show');
        //$('#dialogResponseHtmlFrame').prop('src', srcData);
        $('#dialogResponseHtmlFrame').prop('src', dataBase64);

        return false;
    });


    $(document).trigger("initEvents", 'tab_0');
    $(document).trigger("resetForm", 'request_0');

    var params = new URLSearchParams(window.location.search);
    if (params.has('frameId') && params.has('requestId')) {
        var index = parseInt(params.get('index')),
            requestId = params.get('requestId'),
            frameId = parseInt(params.get('frameId')),
            tab = bgProxy.getTab(bgProxy.activeTab.tabId),
            request = tab.frames.get(frameId).get(requestId)[index];
        $(document).trigger("initForm", [request, "request_0"]);
    } else if (params.has('validateRequest')) {
        requestBuilderController.validateRequest(decodeURIComponent(params.get('validateRequest')));
    }

    $(document).on('change', "[name=request_method]", function (e) {
        if (e.target.value != "")
            $(document).trigger("updateRawRequest", $(this).closest('.ui.tab.active').attr('id'));
    });

    $(document).on('change', "[name=request_protocol]", function (e) {
        if (e.target.value != "")
            $(document).trigger("updateRawRequest", $(this).closest('.ui.tab.active').attr('id'));
    });

    $(document).on('change', "[name=request_url]", function (e) {
        if (e.target.value != "")
            $(document).trigger("updateRawRequest", $(this).closest('.ui.tab.active').attr('id'));
    });

    $(document).on('change', "[name=request]", function (e) {
        if (e.target.value != "")
            $(document).trigger("parseRequest", $(this).closest('.ui.tab.active').attr('id'));
    });
});


$(document).on("initEvents", function (e, data) {
    $('.tiny.form').unbind("submit");
    $('.tiny.form').on('submit', function (e) {
        e.preventDefault();
        return false;
    })
});

$(document).on("removeTab", function (e, index) {
    $('[data-tab=tab_' + index + ']').remove();
    $(".ui.tab.active").removeClass('active');
    $(".request_tab").removeClass('active');
    $('[data-tab=tab_0]').addClass('active');
    $('#request_0').addClass('active');
});


$(document).on("resetForm", function (e, formId) {
    var $form = $('#' + formId + ' #request_form');
    $form.form('clear');
    $form.form('set values', { 'request_method': 'GET', 'request_protocol': 'HTTP', 'request_redirect': true });

    $form.form({
        inline: true,
        keyboardShortcuts: false,
        fields: {
            request_method: {
                identifier: 'request_method',
                rules: [{ type: 'empty' }]
            },
            request_protocol: {
                identifier: 'request_protocol',
                rules: [{ type: 'empty' }]
            },
            request_url: {
                identifier: 'request_url',
                rules: [{
                    prompt: 'URL is required',
                    type: 'regExp',
                    value: /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/i,
                }]
            },
            request_port: {
                identifier: 'request_port',
                rules: [{ type: 'integer', prompt: 'Port should be an integer value', }]
            }
            // ,
            // request: {
            //     identifier: 'request',
            //     rules: [{ type: 'empty' }]
            // }
        }
    });

});

$(document).on("initForm", function (e, request, formId) {
    if (request && request.requestHeaders) {
        var $form = $('#' + formId + ' #request_form');

        var path = request.method + ' ' + request.url + ' HTTP/1.1';
        var headersStr = path + '\n' + request.requestHeaders.map(x => x.name + ": " + x.value).join('\n')

        if (request.requestBody && request.requestBody.formData) {
            var params = Object.keys(request.requestBody.formData).map(function (k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(request.requestBody.formData[k])
            }).join('&')
            headersStr += "\n\n" + params;
        } else if (request.requestBody && request.requestBody.raw) {
            var arr = new Uint8Array(request.requestBody.raw[0].bytes);
            var params = String.fromCharCode.apply(String, arr);
            headersStr += "\n\n" + params;
        }

        $form.form('set values', {
            'request': headersStr,
        });
        $(document).trigger("parseRequest", formId);
    }
});

$(document).on("parseRequest", function (e, formId) {
    var $form = $('#' + formId + ' #request_form');
    var values = $form.form('get values');
    try {
        var schema = bgProxy.Request.parseRawRequest(values);
        $form.form('set value', 'request_method', schema.request.method);
        $form.form('set value', 'request_url', schema.request.url.toString());
        $form.form('set value', 'request_protocol', schema.request.url.protocol.replace(":", ""));
        $form.form('set value', 'request', schema.toString());
    } catch (e) {
        $('#traffic_error_message').text(e);
        $('.mini.modal').modal('show');
    }
});

$(document).on("updateRawRequest", function (e, formId) {
    var $form = $('#' + formId + ' #request_form');
    var values = $form.form('get values');
    if (values.request == "" && values.request_url == "") return;
    try {
        var schema = bgProxy.Request.updateRawRequest(values);
        $form.form('set value', 'request_method', schema.request.method);
        $form.form('set value', 'request_url', schema.request.url.toString());
        $form.form('set value', 'request_protocol', schema.request.url.protocol.replace(":", ""));
        $form.form('set value', 'request', schema.toString());
    } catch (e) {
        $('#traffic_error_message').text(e);
        $('.mini.modal').modal('show');
    }
});

$(document).on("sendRequest", function (e, formId) {
    var schema = {};
    var $form = $('#' + formId + ' #request_form');
    $form.form('set value', 'response_headers', '');
    $form.form('set value', 'response_body', '');
    $form.form('validate form');

    if ($form.form('is valid')) {
        var values = $form.form('get values');
        var schema = bgProxy.Request.parseRawRequest(values);

        var x_pentestkitHeaders = btoa(JSON.stringify(schema.request.headers.map(x => {
            var h = x.split(':');
            if (h.length > 2) return { name: h.shift(), value: h.join(":") };
            return { name: h[0], value: h[1] };
        })));

        var rHeaders = new Headers(schema.request.headers.map(x => {
            var h = x.split(':');
            if (h.length > 2) return [h.shift(), h.join(":")];
            return h;
        }));
        rHeaders.append('x-penetrationtestingkitheaders', x_pentestkitHeaders);

        var params = {
            method: schema.request.method,
            mode: 'cors',
            redirect: values.request_redirect ? "follow" : "manual",
            credentials: 'same-origin',
            cache: 'no-cache',
            headers: rHeaders
        };
        if (schema.request.body && !schema.request.method.toUpperCase().match(/(^GET|^HEAD)/)) {
            params.body = schema.request.body
        }
        var request = new Request(schema.request.url, params);

        fetch(request).then(function (response) {
            let headers = bgProxy.pentestkitRequest.statusLine + "\n";
            bgProxy.pentestkitRequest.headers.forEach(function (value, key) {
                value.forEach(function (val, key) {
                    headers += (val.name != "" ? val.name + ": " : "") + val.value + "\r\n";
                });
            });

            bgProxy.pentestkitRequest.cookie = {};
            bgProxy.pentestkitRequest.statusLine = "";
            bgProxy.pentestkitRequest.headers.clear();

            $form.form('set value', 'response_headers', headers);
            response.text().then(function (body) {
                $form.form('set value', 'response_body', body);
            });
        }).catch(function (error) {
            $form.form('set value', 'response_headers', error.message);
            console.log(error);
        });
    }
});





////////////////////////////////////
/* Index controller instance */
////////////////////////////////////
var requestBuilderController = {

    runScan: function (formId) {
        var $form = $('#' + formId + ' #request_form');
        var values = $form.form('get values');
        $form.form('validate form');

        if ($form.form('is valid')) {
            try {

                if ($.fn.dataTable.isDataTable('#tbl_attacks')) {
                    var table = $('#tbl_attacks').DataTable();
                    table.clear().draw();
                }

                var schema = bgProxy.Request.parseRawRequest(values);
                bgProxy.Scan.runScan(schema);
                $('#dialogResponseAttack').modal('show');
            } catch (e) {
                $('#traffic_error_message').text(e);
                $('.mini.modal').modal('show');
            }
        }
    },

    validateRequest: function (data) {
        var requests = atob(data).split('#H#G#F#E#D#C#B#A#');
        for (var i = 0; i < requests.length; i++) {
            if (i > 0) this.addNewRequest();

            var r_r = requests[i].split('#A#B#C#D#E#F#G#H#');
            var $form = $('#request_' + i + ' #request_form');
            $form.form('set values', {
                'request': r_r[0].trim()
            });
            $('#request_' + i + ' #request_form [name=request]').trigger("paste", null);
            $('#tab_' + i).find('span').text('Attack #' + (i + 1));
            $(document).trigger("parseRequest", ('request_' + i));
            //$(document).trigger("initForm", [r_r[0].trim(), "request_" + i]);
        }
    },

    addNewRequest: function () {

        var lastId = 'tab_0',
            lastIndex = 0,
            newIndex = 0;
        $('#tabMenuId .item').each(function (i, obj) {
            lastId = $(obj).attr('id');
            var i = parseInt($(obj).attr('index'));
            lastIndex = i > lastIndex ? i : lastIndex;
            $(obj).removeClass('active');
        });
        newIndex = lastIndex + 1;

        $("#tabMenuId .item.active").removeClass('active');
        $(".tab.segment.active").removeClass('active');

        var newItem = '<a class="item active request_tab" ' +
            'index="' + newIndex + '" id="tab_' + newIndex + '" data-tab="tab_' + newIndex + '"><span>Request</span><i class="window close icon"></i></a>';
        $('#' + lastId).after(newItem);

        $("#request_" + lastIndex).after($("#request_0").
            clone().
            attr('id', 'request_' + newIndex).
            attr('data-tab', 'tab_' + newIndex).
            addClass('active'));

        $(document).trigger("initEvents", newIndex);
        $(document).trigger("resetForm", 'request_' + newIndex);
        $('.menu .item').tab();
        return newIndex;
    },

    bindAttacks: function () {
        if (bgProxy.Scan.ScanResult.length <= 0) return;


        var dt = new Array();
        //create data source
        bgProxy.Scan.ScanResult.forEach((item, key) => {
            var i = 0, data = {}, ip = '';
            dt.push(['', key, item.baseUrl, item.success, item.attack.description]);
        });

        //move to jquery stuff
        var params = {
            "data": dt,
            "columns": [{
                render: function (data, type, row) {
                    return '<i class="expandchild plus square icon"></i>';
                },
                "className": "one wide"
            },
            { "visible": false }, { "visible": false },
            {
                title: "Success",
                render: function (data, type, row) {
                    return (data ? '<img class="ui mini image" src="assets/images/success.png" style="height: 20px;width: 20px;padding-left: 10px;">' : '<i class="minus large icon" style="padding-left:10px"></i>');
                }, "className": "one wide"

            }, { title: "Description" }]
        };


        var table = bindTable('#tbl_attacks', params);
        $('.expandchild.plus.icon').unbind("click");
        $('.expandchild.plus.icon').on('click', function (e) {
            var tr = $(this).closest('tr'),
                row = table.row(tr),
                values = table.row($(this).parents('tr')).data(),
                baseURI = values[2];

            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                $(this).removeClass('shown minus');
                $(this).addClass('shown plus');
            } else {
                // Open this row
                row.child(
                    `<div>
                        <div class="ui message">
                            <b>Proof</b>: ` + bgProxy.Scan.ScanResult[values[1]].proof + `
                        </div>
                        
                        <form class="ui tiny form">
                            <div class="fields attackRequestResponse" >
                                <div class="eight wide field">
                                    <div class="field" style="position: relative;">
                                        <textarea name="request" class="ui small input" rows="15" placeholder="Request"
                                            style="padding: 5px 0px 0px 5px; width:99%">` + bgProxy.Scan.ScanResult[values[1]].request + `</textarea>
                                    </div>
                                </div>
                                <div class="eight wide field" >
                                    <div class="field">
                                        <div class="field" style="position: relative;">
                                            <button tabindex="-1" class="ui mini secondary button showAttackResponseHtml"
                                                style="position: absolute;top: 0px;z-index: 1;right: -6px;">HTML</button>
                                            <textarea name="response_body" class="ui small input attackResponse" rows="15"
                                                placeholder="Response "
                                                style="padding: 5px 0px 0px 5px;width:99%">` + atob(bgProxy.Scan.ScanResult[values[1]].response) + `</textarea>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            <div class="attackResponseHtmlBox" style="display:none">
                                
                                <div class="ui segment">
                                <i class="close large icon" style="margin-right: -5px;margin-top: -10px;"></i>
                                <iframe class="attackResponseHtmlFrame" frameborder="1"
                                style="overflow:hidden;height:100%;width:100%; min-height: 200px;" height="100%"
                                width="100%"></iframe>
                                </div>
                            </div>
                        </form>
              

                    </div>`
                ).show();

                $(this).removeClass('shown plus');
                $(this).addClass('shown minus');

                $('.showAttackResponseHtml').unbind("click");
                $('.showAttackResponseHtml').on('click', function (e) {

                    var htmlString = $(this).closest('.fields.attackRequestResponse').find('.attackResponse').val();
                    htmlString = htmlString.replace(/<(head)(.+)?>/, "<$1$2><base href='" + baseURI + "' />");
                    var dataBase64 = 'data:text/html;base64,' + btoa(unescape(encodeURIComponent(htmlString)));

                    const blob = new Blob([unescape(encodeURIComponent(htmlString))], { type: 'text/html' });
                    var srcData = URL.createObjectURL(blob)

                    $(this).closest('.fields.attackRequestResponse').hide();
                    $(this).closest('.form').find('.attackResponseHtmlFrame').prop('src', dataBase64);
                    $(this).closest('.form').find('.attackResponseHtmlBox').show();

                    $(this).closest('.form').find('.close').on('click', function (e) {
                        $(this).closest('.form').find('.attackResponseHtmlBox').hide();
                        $(this).closest('.form').find('.attackRequestResponse').show();
                    });
                    return false;
                });
            }
        });
    },
}


////////////////////////////////////
/* Chrome runtime events handlers */
////////////////////////////////////
browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {

    if (message.channel == "ptkBackgroundToPopup" && message.type == "attack completed") {
        //console.log(bgProxy.Scan.ScanResult)
        requestBuilderController.bindAttacks();
    }

});