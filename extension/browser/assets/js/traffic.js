/* Author: Denis Podgurskii */
'use strict';

var isAllowedIncognito = false, isIncognitoTab = false;
$(document).ready(function () {

    chrome.extension.isAllowedIncognitoAccess(function (isAllowedAccess) {
        if (isAllowedAccess) {
            isAllowedIncognito = true;
        }
    });


    var editor = CodeMirror.fromTextArea(document.getElementById('recording_output'), {
        lineNumbers: true,
        mode: "application/xml",
        indentUnit: 6,
        scrollbarStyle: null
    });
    editor.setSize('auto', '509px');

    var $form = $('#traffic_form');
    $form.form({
        fields: {
            url: {
                identifier: 'url',
                rules: [{
                    type: 'regExp',
                    value: /^((http|https):\/\/){1}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])?(:+[0-9]+)?([\/\?]{1}.*)?$/i,
                }]
            },
            min_duration: {
                identifier: 'min_duration',
                rules: [{
                    type: 'integer',
                    prompt: 'Please enter an integer value'
                }]
            },
        }
    });
    $form.form('set value', 'element_path', bgProxy.Recorder.elementPath);
    $form.form('set value', 'min_duration', bgProxy.Recorder.minDuration);

    chrome.tabs.query({
        active: true,
        lastFocusedWindow: true
    }, function (tabs) {
        var tab = tabs[0];
        $form.form('set value', 'url', tab.url);
        if (tab.incognito) {
            $('.incognito_recording').prop("disabled", true);
            isIncognitoTab = true;
        }
    });

    $('.incognito_recording').on('click', function () {
        if (!isAllowedIncognito) {
            bgProxy.Notifications.notify("Incognito mode is not enabled", "Enable the extension in incognito mode");
        } else {
            chrome.tabs.query({
                active: true,
                lastFocusedWindow: true
            }, function (tabs) {
                var tab = tabs[0];
                chrome.windows.create({ "url": tab.url, "incognito": true });
            });
        }
    });


    $('.start').on('click', function () {
        $form.form('validate form');
        if (!$form.form('is valid')) return;

        bgProxy.Recorder.cleanCookie = false;
        var values = $form.form('get values');
        bgProxy.Recorder.startTraffic({ start_url: values['url'], incognito: isIncognitoTab });
    });

    $('.start_clean_cookie').on('click', function () {
        $form.form('validate form');
        if (!$form.form('is valid')) return;

        bgProxy.Recorder.cleanCookie = true;
        var values = $form.form('get values');
        bgProxy.Recorder.startTraffic({ start_url: values['url'], incognito: isIncognitoTab });
    });

    $('.reset_recording').on('click', function () {
        $form.form('set value', 'recording_output', '');
        editor.setValue('');
        bgProxy.Recorder.reset();
    });




    ///////// Traffic /////////
    $('.analyze').on('click', function () {
        var result = bgProxy.Recorder.analyze();
        var diagramContent = "participant Browser\n";
        $("#diagramSVG").html("");
        var cookieIn = 0, authHeaderBasicIn = 0, authHeaderBearerIn = 0, tokenIn = 0;
        if (Object.keys(result).length == 0) {
            bgProxy.Notifications.notify("Recorded traffic is empty", "Record a sequence or authentication to export for further analysis");
            return;
        }

        result.forEach(function (item) {
            if (item.browser) {
                if (item.browser.cookie) {
                    cookieIn++;
                    diagramContent += "Browser->Server: Host: " + item.hostname.substring(0, 30) + "...\n";
                    diagramContent += "Note right of Browser: Cookie: " + item.browser.cookie.item.value.substring(0, 20) + "...\n";
                }
                if (item.browser.authorization) {
                    if (item.browser.authorization.item.value.toLowerCase().includes('basic')) authHeaderBasicIn++;
                    else if (item.browser.authorization.item.value.toLowerCase().includes('bearer')) authHeaderBearerIn++;
                    else tokenIn++;
                    diagramContent += "Browser->Server: Host: " + item.hostname.substring(0, 30) + "...\n";
                    diagramContent += "Note right of Browser: Authorization: " + item.browser.authorization.item.value.substring(0, 15) + "...\n";
                }
            }
            if (item.server) {
                if (item.server.cookie) {
                    cookieIn++;
                    diagramContent += "Server-->Browser: Host: " + item.hostname.substring(0, 30) + "...\n";
                    diagramContent += "Note left of Server: Set-Cookie: " + item.server.cookie.item.value.substring(0, 15) + "...\n";
                }
                if (item.server.token) {
                    tokenIn++;
                    diagramContent += "Server-->Browser: Host: " + item.hostname.substring(0, 30) + "...\n";
                    diagramContent += "Note left of Server: Token: " + item.server.token.item.substring(0, 15) + "...\n";
                }
            }
        });

        if (diagramContent != "") {
            var diagram = Diagram.parse(diagramContent);
            $("#trafficView").css("display", "none");
            $("#diagramView").css("display", "block");
            $("#auth_rating").css("display", "block");
            diagram.drawSVG("diagramSVG", { theme: 'simple' });
            if (cookieIn) {
                $("#macro_rating").attr('data-rating', 5);
                $("#traffic_rating").attr('data-rating', 4);
            }
            if (authHeaderBasicIn) {
                $("#basic_rating").attr('data-rating', 5);
            }
            if (authHeaderBearerIn) {
                $("#bearer_rating").attr('data-rating', 5);
            }
            if (tokenIn) {
                $("#token_rating").attr('data-rating', 5);
            }

            $('.rating').rating();
        }
    });

    $('.traffic_export').on('click', function () {
        $("#trafficView").css("display", "block");
        $("#diagramView").css("display", "none");
        $("#auth_rating").css("display", "none");
        bgProxy.Recorder.analyze();
        var harLog = bgProxy.Exporter.renderHar(bgProxy.Recorder.requests);
        if (harLog) {
            $form.form('set value', 'recording_output', JSON.stringify(harLog, null, 2));
            editor.setOption("mode", "javascript/json");
            editor.setValue(JSON.stringify(harLog, null, 2));
        } else {
            bgProxy.Notifications.notify("Recorded traffic is empty", "Record a sequence or authentication to export or download");
            return;
        }
    });

    $('.traffic_download').on('click', function () {
        $('.traffic_export').trigger('click');
        var blob = new Blob([editor.getValue()], { type: 'text/plain' });
        var values = $form.form('get values');
        var fName = "PenTestKitTraffic.har";
        if (blob.size > 0) {
            var downloadLink = document.createElement("a");
            downloadLink.download = fName;
            downloadLink.innerHTML = "Download File";
            downloadLink.href = window.URL.createObjectURL(blob);
            downloadLink.click();
        }
    });

    var result = bgProxy.Recorder.analyze();
    if (Object.keys(result).length > 0) {
        $('.analyze').trigger('click');
    }

});