/* Author: Denis Podgurskii */
'use strict';

var isAllowedIncognito = false, isIncognitoTab = false;
$(document).ready(function () {

    chrome.extension.isAllowedIncognitoAccess(function (isAllowedAccess) {
        if (isAllowedAccess) {
            isAllowedIncognito = true;
        }
    });

    var editor = CodeMirror.fromTextArea(document.getElementById('recording_output'), {
        lineNumbers: true,
        mode: "application/xml",
        indentUnit: 6,
        scrollbarStyle: null
    });
    editor.setSize('auto', '509px');

    editor.on('change', e => {
        var currentVal = editor.getValue();;
        if (currentVal == bgProxy.Recorder.savedMacro) {
            return;
        }
        bgProxy.Recorder.savedMacro = currentVal;
    });

    var $form = $('#macro_form');
    $form.form({
        fields: {
            url: {
                identifier: 'url',
                rules: [{
                    type: 'regExp',
                    value: /^((http|https):\/\/){1}(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])?(:+[0-9]+)?([\/\?]{1}.*)?$/i,
                }]
            },
            min_duration: {
                identifier: 'min_duration',
                rules: [{
                    type: 'integer',
                    prompt: 'Please enter an integer value'
                }]
            },
        }
    });
    macroController.setFrom();

    chrome.tabs.query({
        active: true,
        lastFocusedWindow: true
    }, function (tabs) {
        var tab = tabs[0];
        $form.form('set value', 'url', tab.url);
        if (tab.incognito) {
            $('.incognito_recording').prop("disabled", true);
            isIncognitoTab = true;
        }
    });

    $('.incognito_recording').on('click', function () {
        if (!isAllowedIncognito) {
            bgProxy.Notifications.notify("Incognito mode is not enabled", "Enable the extension in incognito mode");
        } else {
            chrome.tabs.query({
                active: true,
                lastFocusedWindow: true
            }, function (tabs) {
                var tab = tabs[0];
                chrome.windows.create({ "url": tab.url, "incognito": true });
            });
        }
    });

    $('.start').on('click', function () {
        $form.form('validate form');
        if (!$form.form('is valid')) return;

        bgProxy.Recorder.cleanCookie = false;
        var values = $form.form('get values');
        bgProxy.Recorder.startMacro({ start_url: values['url'], incognito: isIncognitoTab });
        bgProxy.Recorder.savedMacro = "";
    });

    $('.start_clean_cookie').on('click', function () {
        $form.form('validate form');
        if (!$form.form('is valid')) return;

        bgProxy.Recorder.cleanCookie = true;
        var values = $form.form('get values');
        bgProxy.Recorder.startMacro({ start_url: values['url'], incognito: isIncognitoTab });
        bgProxy.Recorder.savedMacro = "";
    });

    $('.reset_recording').on('click', function () {
        $form.form('set value', 'recording_output', '');
        editor.setValue('');
        bgProxy.Recorder.reset();
    });

    ///////// Macro /////////

    $("input[name='element_path']").on('change', function () {
        bgProxy.Recorder.elementPath = this.value;
    });

    $("input[name='min_duration']").on('change', function () {
        bgProxy.Recorder.minDuration = this.value;
    });

    $("input[name='playback_regex']").on('change', function () {
        bgProxy.Recorder.playbackRegex = this.value;
    });

    $("input[name='enable_regex']").on('change', function () {
        var $form = $('#macro_form'),
            values = $form.form('get values');
        if (values['enable_regex'] == 'on')
            $("input[name='playback_regex']").prop('disabled', false);
        else {
            $("input[name='playback_regex']").prop('disabled', true);
        }
        bgProxy.Recorder.enableRegex = (values['enable_regex'] == 'on' ? true : false);
    });

    $('.macro_export').on('click', function () {
        var $form = $('#macro_form');
        $form.form({
            fields: {
                min_duration: {
                    identifier: 'min_duration',
                    rules: [{
                        type: 'integer',
                        prompt: 'Please enter an integer value'
                    }]
                },
            }
        });
        if (!$form.form('is valid')) return;

        var values = $form.form('get values');
        values['useEncryption'] = false;

        if (bgProxy.Recorder.items.length > 0) {
            var res = bgProxy.Exporter.renderXml(bgProxy.Recorder.items, values);
            $form.form('set value', 'recording_output', res);
            editor.setOption("mode", "application/xml");
            editor.setValue(res);
            bgProxy.Recorder.savedMacro = res;
        }

    });

    $('.macro_replay').on('click', function () {
        try {
            var xml = editor.getValue(),
                xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                $events = $xml.find("MacroEvent"),
                macroEvents = [],
                startUrl = null;
            $events.each(function (index) {
                var item = {
                    EventType: $(this).find('EventType').text(),
                    UseEncryptedData: $(this).find('UseEncryptedData').text(),
                    Data: $(this).find('Data').text(),
                    ElementPath: $(this).find('ElementPath').text(),
                    Duration: $(this).find('Duration').text(),
                    Enable: $(this).find('Enable').text(),
                    Optional: $(this).find('Optional').text()
                };
                if (item.EventType == 'Navigate') startUrl = item.Data;
                macroEvents.push(item);
            });

            if (macroEvents.length > 0 && startUrl != null) {
                var $form = $('#macro_form');
                var values = $form.form('get values');
                bgProxy.Recorder.replay({
                    url: startUrl,
                    events: macroEvents,
                    validateRegex: (values['enable_regex'] == 'on') ? values['playback_regex'] : null
                });
            } else {
                bgProxy.Notifications.notify("Macro events list is empty", "Export or paste a macro to replay");
            }
        } catch (e) {
            bgProxy.Notifications.notify("Could not parse XML", e.message.substr(0, 20));
        }
    });

    $('.macro_download').on('click', function () {
        try {
            var xml = editor.getValue();
            if (xml == "") $('.macro_export').trigger('click');
            xml = editor.getValue();
            var xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                $events = $xml.find("MacroEvent");
            if ($events.length > 0) {
                setTimeout(function () {
                    var blob = new Blob([editor.getValue()], { type: 'text/plain' });
                    var values = $form.form('get values');
                    var fName = "PenTestKitMacro.rec";

                    var downloadLink = document.createElement("a");
                    downloadLink.download = fName;
                    downloadLink.innerHTML = "Download File";
                    downloadLink.href = window.URL.createObjectURL(blob);
                    downloadLink.click();
                }, 100);
            } else {
                bgProxy.Notifications.notify("Macro events list is empty", "Record a macro before download");
            }
        } catch (e) {
            bgProxy.Notifications.notify("Could not parse XML", e.message.substr(0, 20));
        }
    });

    $('.question').popup();
    $('.ui.accordion').accordion();

    if (bgProxy.Recorder.savedMacro != "") {
        var $form = $('#macro_form');
        $form.form('set value', 'recording_output', bgProxy.Recorder.savedMacro);
        editor.setOption("mode", "application/xml");
        editor.setValue(bgProxy.Recorder.savedMacro);
    } else {
        $('.macro_export').trigger('click');
    }
});

var macroController = {
    setFrom: function () { 
        var $form = $('#macro_form');
        $form.form('set value', 'element_path', bgProxy.Recorder.elementPath);
        $form.form('set value', 'min_duration', bgProxy.Recorder.minDuration);
        $form.form('set value', 'enable_regex', bgProxy.Recorder.enableRegex);
        $form.form('set value', 'playback_regex', bgProxy.Recorder.playbackRegex);
        if (bgProxy.Recorder.enableRegex)
            $("input[name='playback_regex']").prop('disabled', false);
        else {
            $("input[name='playback_regex']").prop('disabled', true);
        }
    }
};

chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    if (message.channel == "ptkBackgroundToPopup" && message.type == "recording completed") {
        $('.macro_export').trigger('click');
    }
});